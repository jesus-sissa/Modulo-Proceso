'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.8745
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("ds_Reportes"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class ds_Reportes
    Inherits Global.System.Data.DataSet
    
    Private tableTbl_HojaTrabajo As Tbl_HojaTrabajoDataTable
    
    Private tableTbl_Denominacion As Tbl_DenominacionDataTable
    
    Private tableCat_Sucursales As Cat_SucursalesDataTable
    
    Private tableTbl_Fichas As Tbl_FichasDataTable
    
    Private tableTbl_Cheques As Tbl_ChequesDataTable
    
    Private tableTbl_FichasEfectivo As Tbl_FichasEfectivoDataTable
    
    Private tableTbl_Tabular As Tbl_TabularDataTable
    
    Private tableTbl_TabularFicha As Tbl_TabularFichaDataTable
    
    Private tableTbl_DenominacionesFichas As Tbl_DenominacionesFichasDataTable
    
    Private tabletbl_ActaDiferencia As tbl_ActaDiferenciaDataTable
    
    Private tabletbl_EnvasesActa As tbl_EnvasesActaDataTable
    
    Private tableTbl_DesgloseActas As Tbl_DesgloseActasDataTable
    
    Private tableTbl_FichasFalsos As Tbl_FichasFalsosDataTable
    
    Private tableTbl_DatosEmpresa As Tbl_DatosEmpresaDataTable
    
    Private tableTbl_RecuentoDesglose As Tbl_RecuentoDesgloseDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Tbl_HojaTrabajo")) Is Nothing) Then
                MyBase.Tables.Add(New Tbl_HojaTrabajoDataTable(ds.Tables("Tbl_HojaTrabajo")))
            End If
            If (Not (ds.Tables("Tbl_Denominacion")) Is Nothing) Then
                MyBase.Tables.Add(New Tbl_DenominacionDataTable(ds.Tables("Tbl_Denominacion")))
            End If
            If (Not (ds.Tables("Cat_Sucursales")) Is Nothing) Then
                MyBase.Tables.Add(New Cat_SucursalesDataTable(ds.Tables("Cat_Sucursales")))
            End If
            If (Not (ds.Tables("Tbl_Fichas")) Is Nothing) Then
                MyBase.Tables.Add(New Tbl_FichasDataTable(ds.Tables("Tbl_Fichas")))
            End If
            If (Not (ds.Tables("Tbl_Cheques")) Is Nothing) Then
                MyBase.Tables.Add(New Tbl_ChequesDataTable(ds.Tables("Tbl_Cheques")))
            End If
            If (Not (ds.Tables("Tbl_FichasEfectivo")) Is Nothing) Then
                MyBase.Tables.Add(New Tbl_FichasEfectivoDataTable(ds.Tables("Tbl_FichasEfectivo")))
            End If
            If (Not (ds.Tables("Tbl_Tabular")) Is Nothing) Then
                MyBase.Tables.Add(New Tbl_TabularDataTable(ds.Tables("Tbl_Tabular")))
            End If
            If (Not (ds.Tables("Tbl_TabularFicha")) Is Nothing) Then
                MyBase.Tables.Add(New Tbl_TabularFichaDataTable(ds.Tables("Tbl_TabularFicha")))
            End If
            If (Not (ds.Tables("Tbl_DenominacionesFichas")) Is Nothing) Then
                MyBase.Tables.Add(New Tbl_DenominacionesFichasDataTable(ds.Tables("Tbl_DenominacionesFichas")))
            End If
            If (Not (ds.Tables("tbl_ActaDiferencia")) Is Nothing) Then
                MyBase.Tables.Add(New tbl_ActaDiferenciaDataTable(ds.Tables("tbl_ActaDiferencia")))
            End If
            If (Not (ds.Tables("tbl_EnvasesActa")) Is Nothing) Then
                MyBase.Tables.Add(New tbl_EnvasesActaDataTable(ds.Tables("tbl_EnvasesActa")))
            End If
            If (Not (ds.Tables("Tbl_DesgloseActas")) Is Nothing) Then
                MyBase.Tables.Add(New Tbl_DesgloseActasDataTable(ds.Tables("Tbl_DesgloseActas")))
            End If
            If (Not (ds.Tables("Tbl_FichasFalsos")) Is Nothing) Then
                MyBase.Tables.Add(New Tbl_FichasFalsosDataTable(ds.Tables("Tbl_FichasFalsos")))
            End If
            If (Not (ds.Tables("Tbl_DatosEmpresa")) Is Nothing) Then
                MyBase.Tables.Add(New Tbl_DatosEmpresaDataTable(ds.Tables("Tbl_DatosEmpresa")))
            End If
            If (Not (ds.Tables("Tbl_RecuentoDesglose")) Is Nothing) Then
                MyBase.Tables.Add(New Tbl_RecuentoDesgloseDataTable(ds.Tables("Tbl_RecuentoDesglose")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Tbl_HojaTrabajo() As Tbl_HojaTrabajoDataTable
        Get
            Return Me.tableTbl_HojaTrabajo
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Tbl_Denominacion() As Tbl_DenominacionDataTable
        Get
            Return Me.tableTbl_Denominacion
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Cat_Sucursales() As Cat_SucursalesDataTable
        Get
            Return Me.tableCat_Sucursales
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Tbl_Fichas() As Tbl_FichasDataTable
        Get
            Return Me.tableTbl_Fichas
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Tbl_Cheques() As Tbl_ChequesDataTable
        Get
            Return Me.tableTbl_Cheques
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Tbl_FichasEfectivo() As Tbl_FichasEfectivoDataTable
        Get
            Return Me.tableTbl_FichasEfectivo
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Tbl_Tabular() As Tbl_TabularDataTable
        Get
            Return Me.tableTbl_Tabular
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Tbl_TabularFicha() As Tbl_TabularFichaDataTable
        Get
            Return Me.tableTbl_TabularFicha
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Tbl_DenominacionesFichas() As Tbl_DenominacionesFichasDataTable
        Get
            Return Me.tableTbl_DenominacionesFichas
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tbl_ActaDiferencia() As tbl_ActaDiferenciaDataTable
        Get
            Return Me.tabletbl_ActaDiferencia
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tbl_EnvasesActa() As tbl_EnvasesActaDataTable
        Get
            Return Me.tabletbl_EnvasesActa
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Tbl_DesgloseActas() As Tbl_DesgloseActasDataTable
        Get
            Return Me.tableTbl_DesgloseActas
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Tbl_FichasFalsos() As Tbl_FichasFalsosDataTable
        Get
            Return Me.tableTbl_FichasFalsos
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Tbl_DatosEmpresa() As Tbl_DatosEmpresaDataTable
        Get
            Return Me.tableTbl_DatosEmpresa
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Tbl_RecuentoDesglose() As Tbl_RecuentoDesgloseDataTable
        Get
            Return Me.tableTbl_RecuentoDesglose
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As ds_Reportes = CType(MyBase.Clone,ds_Reportes)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("Tbl_HojaTrabajo")) Is Nothing) Then
                MyBase.Tables.Add(New Tbl_HojaTrabajoDataTable(ds.Tables("Tbl_HojaTrabajo")))
            End If
            If (Not (ds.Tables("Tbl_Denominacion")) Is Nothing) Then
                MyBase.Tables.Add(New Tbl_DenominacionDataTable(ds.Tables("Tbl_Denominacion")))
            End If
            If (Not (ds.Tables("Cat_Sucursales")) Is Nothing) Then
                MyBase.Tables.Add(New Cat_SucursalesDataTable(ds.Tables("Cat_Sucursales")))
            End If
            If (Not (ds.Tables("Tbl_Fichas")) Is Nothing) Then
                MyBase.Tables.Add(New Tbl_FichasDataTable(ds.Tables("Tbl_Fichas")))
            End If
            If (Not (ds.Tables("Tbl_Cheques")) Is Nothing) Then
                MyBase.Tables.Add(New Tbl_ChequesDataTable(ds.Tables("Tbl_Cheques")))
            End If
            If (Not (ds.Tables("Tbl_FichasEfectivo")) Is Nothing) Then
                MyBase.Tables.Add(New Tbl_FichasEfectivoDataTable(ds.Tables("Tbl_FichasEfectivo")))
            End If
            If (Not (ds.Tables("Tbl_Tabular")) Is Nothing) Then
                MyBase.Tables.Add(New Tbl_TabularDataTable(ds.Tables("Tbl_Tabular")))
            End If
            If (Not (ds.Tables("Tbl_TabularFicha")) Is Nothing) Then
                MyBase.Tables.Add(New Tbl_TabularFichaDataTable(ds.Tables("Tbl_TabularFicha")))
            End If
            If (Not (ds.Tables("Tbl_DenominacionesFichas")) Is Nothing) Then
                MyBase.Tables.Add(New Tbl_DenominacionesFichasDataTable(ds.Tables("Tbl_DenominacionesFichas")))
            End If
            If (Not (ds.Tables("tbl_ActaDiferencia")) Is Nothing) Then
                MyBase.Tables.Add(New tbl_ActaDiferenciaDataTable(ds.Tables("tbl_ActaDiferencia")))
            End If
            If (Not (ds.Tables("tbl_EnvasesActa")) Is Nothing) Then
                MyBase.Tables.Add(New tbl_EnvasesActaDataTable(ds.Tables("tbl_EnvasesActa")))
            End If
            If (Not (ds.Tables("Tbl_DesgloseActas")) Is Nothing) Then
                MyBase.Tables.Add(New Tbl_DesgloseActasDataTable(ds.Tables("Tbl_DesgloseActas")))
            End If
            If (Not (ds.Tables("Tbl_FichasFalsos")) Is Nothing) Then
                MyBase.Tables.Add(New Tbl_FichasFalsosDataTable(ds.Tables("Tbl_FichasFalsos")))
            End If
            If (Not (ds.Tables("Tbl_DatosEmpresa")) Is Nothing) Then
                MyBase.Tables.Add(New Tbl_DatosEmpresaDataTable(ds.Tables("Tbl_DatosEmpresa")))
            End If
            If (Not (ds.Tables("Tbl_RecuentoDesglose")) Is Nothing) Then
                MyBase.Tables.Add(New Tbl_RecuentoDesgloseDataTable(ds.Tables("Tbl_RecuentoDesglose")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableTbl_HojaTrabajo = CType(MyBase.Tables("Tbl_HojaTrabajo"),Tbl_HojaTrabajoDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTbl_HojaTrabajo) Is Nothing) Then
                Me.tableTbl_HojaTrabajo.InitVars
            End If
        End If
        Me.tableTbl_Denominacion = CType(MyBase.Tables("Tbl_Denominacion"),Tbl_DenominacionDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTbl_Denominacion) Is Nothing) Then
                Me.tableTbl_Denominacion.InitVars
            End If
        End If
        Me.tableCat_Sucursales = CType(MyBase.Tables("Cat_Sucursales"),Cat_SucursalesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCat_Sucursales) Is Nothing) Then
                Me.tableCat_Sucursales.InitVars
            End If
        End If
        Me.tableTbl_Fichas = CType(MyBase.Tables("Tbl_Fichas"),Tbl_FichasDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTbl_Fichas) Is Nothing) Then
                Me.tableTbl_Fichas.InitVars
            End If
        End If
        Me.tableTbl_Cheques = CType(MyBase.Tables("Tbl_Cheques"),Tbl_ChequesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTbl_Cheques) Is Nothing) Then
                Me.tableTbl_Cheques.InitVars
            End If
        End If
        Me.tableTbl_FichasEfectivo = CType(MyBase.Tables("Tbl_FichasEfectivo"),Tbl_FichasEfectivoDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTbl_FichasEfectivo) Is Nothing) Then
                Me.tableTbl_FichasEfectivo.InitVars
            End If
        End If
        Me.tableTbl_Tabular = CType(MyBase.Tables("Tbl_Tabular"),Tbl_TabularDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTbl_Tabular) Is Nothing) Then
                Me.tableTbl_Tabular.InitVars
            End If
        End If
        Me.tableTbl_TabularFicha = CType(MyBase.Tables("Tbl_TabularFicha"),Tbl_TabularFichaDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTbl_TabularFicha) Is Nothing) Then
                Me.tableTbl_TabularFicha.InitVars
            End If
        End If
        Me.tableTbl_DenominacionesFichas = CType(MyBase.Tables("Tbl_DenominacionesFichas"),Tbl_DenominacionesFichasDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTbl_DenominacionesFichas) Is Nothing) Then
                Me.tableTbl_DenominacionesFichas.InitVars
            End If
        End If
        Me.tabletbl_ActaDiferencia = CType(MyBase.Tables("tbl_ActaDiferencia"),tbl_ActaDiferenciaDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletbl_ActaDiferencia) Is Nothing) Then
                Me.tabletbl_ActaDiferencia.InitVars
            End If
        End If
        Me.tabletbl_EnvasesActa = CType(MyBase.Tables("tbl_EnvasesActa"),tbl_EnvasesActaDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletbl_EnvasesActa) Is Nothing) Then
                Me.tabletbl_EnvasesActa.InitVars
            End If
        End If
        Me.tableTbl_DesgloseActas = CType(MyBase.Tables("Tbl_DesgloseActas"),Tbl_DesgloseActasDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTbl_DesgloseActas) Is Nothing) Then
                Me.tableTbl_DesgloseActas.InitVars
            End If
        End If
        Me.tableTbl_FichasFalsos = CType(MyBase.Tables("Tbl_FichasFalsos"),Tbl_FichasFalsosDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTbl_FichasFalsos) Is Nothing) Then
                Me.tableTbl_FichasFalsos.InitVars
            End If
        End If
        Me.tableTbl_DatosEmpresa = CType(MyBase.Tables("Tbl_DatosEmpresa"),Tbl_DatosEmpresaDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTbl_DatosEmpresa) Is Nothing) Then
                Me.tableTbl_DatosEmpresa.InitVars
            End If
        End If
        Me.tableTbl_RecuentoDesglose = CType(MyBase.Tables("Tbl_RecuentoDesglose"),Tbl_RecuentoDesgloseDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTbl_RecuentoDesglose) Is Nothing) Then
                Me.tableTbl_RecuentoDesglose.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "ds_Reportes"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/ds_Reportes.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableTbl_HojaTrabajo = New Tbl_HojaTrabajoDataTable
        MyBase.Tables.Add(Me.tableTbl_HojaTrabajo)
        Me.tableTbl_Denominacion = New Tbl_DenominacionDataTable
        MyBase.Tables.Add(Me.tableTbl_Denominacion)
        Me.tableCat_Sucursales = New Cat_SucursalesDataTable
        MyBase.Tables.Add(Me.tableCat_Sucursales)
        Me.tableTbl_Fichas = New Tbl_FichasDataTable
        MyBase.Tables.Add(Me.tableTbl_Fichas)
        Me.tableTbl_Cheques = New Tbl_ChequesDataTable
        MyBase.Tables.Add(Me.tableTbl_Cheques)
        Me.tableTbl_FichasEfectivo = New Tbl_FichasEfectivoDataTable
        MyBase.Tables.Add(Me.tableTbl_FichasEfectivo)
        Me.tableTbl_Tabular = New Tbl_TabularDataTable
        MyBase.Tables.Add(Me.tableTbl_Tabular)
        Me.tableTbl_TabularFicha = New Tbl_TabularFichaDataTable
        MyBase.Tables.Add(Me.tableTbl_TabularFicha)
        Me.tableTbl_DenominacionesFichas = New Tbl_DenominacionesFichasDataTable
        MyBase.Tables.Add(Me.tableTbl_DenominacionesFichas)
        Me.tabletbl_ActaDiferencia = New tbl_ActaDiferenciaDataTable
        MyBase.Tables.Add(Me.tabletbl_ActaDiferencia)
        Me.tabletbl_EnvasesActa = New tbl_EnvasesActaDataTable
        MyBase.Tables.Add(Me.tabletbl_EnvasesActa)
        Me.tableTbl_DesgloseActas = New Tbl_DesgloseActasDataTable
        MyBase.Tables.Add(Me.tableTbl_DesgloseActas)
        Me.tableTbl_FichasFalsos = New Tbl_FichasFalsosDataTable
        MyBase.Tables.Add(Me.tableTbl_FichasFalsos)
        Me.tableTbl_DatosEmpresa = New Tbl_DatosEmpresaDataTable
        MyBase.Tables.Add(Me.tableTbl_DatosEmpresa)
        Me.tableTbl_RecuentoDesglose = New Tbl_RecuentoDesgloseDataTable
        MyBase.Tables.Add(Me.tableTbl_RecuentoDesglose)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTbl_HojaTrabajo() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTbl_Denominacion() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCat_Sucursales() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTbl_Fichas() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTbl_Cheques() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTbl_FichasEfectivo() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTbl_Tabular() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTbl_TabularFicha() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTbl_DenominacionesFichas() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializetbl_ActaDiferencia() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializetbl_EnvasesActa() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTbl_DesgloseActas() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTbl_FichasFalsos() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTbl_DatosEmpresa() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTbl_RecuentoDesglose() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As ds_Reportes = New ds_Reportes
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub Tbl_HojaTrabajoRowChangeEventHandler(ByVal sender As Object, ByVal e As Tbl_HojaTrabajoRowChangeEvent)
    
    Public Delegate Sub Tbl_DenominacionRowChangeEventHandler(ByVal sender As Object, ByVal e As Tbl_DenominacionRowChangeEvent)
    
    Public Delegate Sub Cat_SucursalesRowChangeEventHandler(ByVal sender As Object, ByVal e As Cat_SucursalesRowChangeEvent)
    
    Public Delegate Sub Tbl_FichasRowChangeEventHandler(ByVal sender As Object, ByVal e As Tbl_FichasRowChangeEvent)
    
    Public Delegate Sub Tbl_ChequesRowChangeEventHandler(ByVal sender As Object, ByVal e As Tbl_ChequesRowChangeEvent)
    
    Public Delegate Sub Tbl_FichasEfectivoRowChangeEventHandler(ByVal sender As Object, ByVal e As Tbl_FichasEfectivoRowChangeEvent)
    
    Public Delegate Sub Tbl_TabularRowChangeEventHandler(ByVal sender As Object, ByVal e As Tbl_TabularRowChangeEvent)
    
    Public Delegate Sub Tbl_TabularFichaRowChangeEventHandler(ByVal sender As Object, ByVal e As Tbl_TabularFichaRowChangeEvent)
    
    Public Delegate Sub Tbl_DenominacionesFichasRowChangeEventHandler(ByVal sender As Object, ByVal e As Tbl_DenominacionesFichasRowChangeEvent)
    
    Public Delegate Sub tbl_ActaDiferenciaRowChangeEventHandler(ByVal sender As Object, ByVal e As tbl_ActaDiferenciaRowChangeEvent)
    
    Public Delegate Sub tbl_EnvasesActaRowChangeEventHandler(ByVal sender As Object, ByVal e As tbl_EnvasesActaRowChangeEvent)
    
    Public Delegate Sub Tbl_DesgloseActasRowChangeEventHandler(ByVal sender As Object, ByVal e As Tbl_DesgloseActasRowChangeEvent)
    
    Public Delegate Sub Tbl_FichasFalsosRowChangeEventHandler(ByVal sender As Object, ByVal e As Tbl_FichasFalsosRowChangeEvent)
    
    Public Delegate Sub Tbl_DatosEmpresaRowChangeEventHandler(ByVal sender As Object, ByVal e As Tbl_DatosEmpresaRowChangeEvent)
    
    Public Delegate Sub Tbl_RecuentoDesgloseRowChangeEventHandler(ByVal sender As Object, ByVal e As Tbl_RecuentoDesgloseRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Tbl_HojaTrabajoDataTable
        Inherits Global.System.Data.TypedTableBase(Of Tbl_HojaTrabajoRow)
        
        Private columnVerificador As Global.System.Data.DataColumn
        
        Private columnCliente As Global.System.Data.DataColumn
        
        Private columnCte_TV As Global.System.Data.DataColumn
        
        Private columnRemision As Global.System.Data.DataColumn
        
        Private columnFicha As Global.System.Data.DataColumn
        
        Private columnEfectivo As Global.System.Data.DataColumn
        
        Private columnCheques As Global.System.Data.DataColumn
        
        Private columnOtros As Global.System.Data.DataColumn
        
        Private columnD_Efectivo As Global.System.Data.DataColumn
        
        Private columnD_Cheques As Global.System.Data.DataColumn
        
        Private columnD_Doctos As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Tbl_HojaTrabajo"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VerificadorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVerificador
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClienteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCliente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Cte_TVColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCte_TV
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RemisionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRemision
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FichaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFicha
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EfectivoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEfectivo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ChequesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCheques
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OtrosColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOtros
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property D_EfectivoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnD_Efectivo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property D_ChequesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnD_Cheques
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property D_DoctosColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnD_Doctos
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Tbl_HojaTrabajoRow
            Get
                Return CType(Me.Rows(index),Tbl_HojaTrabajoRow)
            End Get
        End Property
        
        Public Event Tbl_HojaTrabajoRowChanging As Tbl_HojaTrabajoRowChangeEventHandler
        
        Public Event Tbl_HojaTrabajoRowChanged As Tbl_HojaTrabajoRowChangeEventHandler
        
        Public Event Tbl_HojaTrabajoRowDeleting As Tbl_HojaTrabajoRowChangeEventHandler
        
        Public Event Tbl_HojaTrabajoRowDeleted As Tbl_HojaTrabajoRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTbl_HojaTrabajoRow(ByVal row As Tbl_HojaTrabajoRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTbl_HojaTrabajoRow(ByVal Verificador As String, ByVal Cliente As String, ByVal Cte_TV As String, ByVal Remision As Decimal, ByVal Ficha As Decimal, ByVal Efectivo As Decimal, ByVal Cheques As Decimal, ByVal Otros As Decimal, ByVal D_Efectivo As Decimal, ByVal D_Cheques As Decimal, ByVal D_Doctos As Decimal) As Tbl_HojaTrabajoRow
            Dim rowTbl_HojaTrabajoRow As Tbl_HojaTrabajoRow = CType(Me.NewRow,Tbl_HojaTrabajoRow)
            Dim columnValuesArray() As Object = New Object() {Verificador, Cliente, Cte_TV, Remision, Ficha, Efectivo, Cheques, Otros, D_Efectivo, D_Cheques, D_Doctos}
            rowTbl_HojaTrabajoRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTbl_HojaTrabajoRow)
            Return rowTbl_HojaTrabajoRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Tbl_HojaTrabajoDataTable = CType(MyBase.Clone,Tbl_HojaTrabajoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Tbl_HojaTrabajoDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnVerificador = MyBase.Columns("Verificador")
            Me.columnCliente = MyBase.Columns("Cliente")
            Me.columnCte_TV = MyBase.Columns("Cte TV")
            Me.columnRemision = MyBase.Columns("Remision")
            Me.columnFicha = MyBase.Columns("Ficha")
            Me.columnEfectivo = MyBase.Columns("Efectivo")
            Me.columnCheques = MyBase.Columns("Cheques")
            Me.columnOtros = MyBase.Columns("Otros")
            Me.columnD_Efectivo = MyBase.Columns("D Efectivo")
            Me.columnD_Cheques = MyBase.Columns("D Cheques")
            Me.columnD_Doctos = MyBase.Columns("D Doctos")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnVerificador = New Global.System.Data.DataColumn("Verificador", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVerificador)
            Me.columnCliente = New Global.System.Data.DataColumn("Cliente", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCliente)
            Me.columnCte_TV = New Global.System.Data.DataColumn("Cte TV", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCte_TV)
            Me.columnRemision = New Global.System.Data.DataColumn("Remision", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRemision)
            Me.columnFicha = New Global.System.Data.DataColumn("Ficha", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFicha)
            Me.columnEfectivo = New Global.System.Data.DataColumn("Efectivo", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEfectivo)
            Me.columnCheques = New Global.System.Data.DataColumn("Cheques", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCheques)
            Me.columnOtros = New Global.System.Data.DataColumn("Otros", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOtros)
            Me.columnD_Efectivo = New Global.System.Data.DataColumn("D Efectivo", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnD_Efectivo)
            Me.columnD_Cheques = New Global.System.Data.DataColumn("D Cheques", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnD_Cheques)
            Me.columnD_Doctos = New Global.System.Data.DataColumn("D Doctos", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnD_Doctos)
            Me.columnVerificador.AllowDBNull = false
            Me.columnVerificador.MaxLength = 4
            Me.columnCliente.AllowDBNull = false
            Me.columnCliente.MaxLength = 150
            Me.columnCte_TV.AllowDBNull = false
            Me.columnCte_TV.MaxLength = 20
            Me.columnRemision.AllowDBNull = false
            Me.columnFicha.AllowDBNull = false
            Me.columnEfectivo.AllowDBNull = false
            Me.columnCheques.AllowDBNull = false
            Me.columnOtros.AllowDBNull = false
            Me.columnD_Efectivo.AllowDBNull = false
            Me.columnD_Cheques.AllowDBNull = false
            Me.columnD_Doctos.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTbl_HojaTrabajoRow() As Tbl_HojaTrabajoRow
            Return CType(Me.NewRow,Tbl_HojaTrabajoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Tbl_HojaTrabajoRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Tbl_HojaTrabajoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Tbl_HojaTrabajoRowChangedEvent) Is Nothing) Then
                RaiseEvent Tbl_HojaTrabajoRowChanged(Me, New Tbl_HojaTrabajoRowChangeEvent(CType(e.Row,Tbl_HojaTrabajoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Tbl_HojaTrabajoRowChangingEvent) Is Nothing) Then
                RaiseEvent Tbl_HojaTrabajoRowChanging(Me, New Tbl_HojaTrabajoRowChangeEvent(CType(e.Row,Tbl_HojaTrabajoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Tbl_HojaTrabajoRowDeletedEvent) Is Nothing) Then
                RaiseEvent Tbl_HojaTrabajoRowDeleted(Me, New Tbl_HojaTrabajoRowChangeEvent(CType(e.Row,Tbl_HojaTrabajoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Tbl_HojaTrabajoRowDeletingEvent) Is Nothing) Then
                RaiseEvent Tbl_HojaTrabajoRowDeleting(Me, New Tbl_HojaTrabajoRowChangeEvent(CType(e.Row,Tbl_HojaTrabajoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTbl_HojaTrabajoRow(ByVal row As Tbl_HojaTrabajoRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ds_Reportes = New ds_Reportes
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Tbl_HojaTrabajoDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Tbl_DenominacionDataTable
        Inherits Global.System.Data.TypedTableBase(Of Tbl_DenominacionRow)
        
        Private columnDenominacion As Global.System.Data.DataColumn
        
        Private columnCantidad As Global.System.Data.DataColumn
        
        Private columnImporte As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Tbl_Denominacion"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DenominacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDenominacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CantidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCantidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ImporteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnImporte
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Tbl_DenominacionRow
            Get
                Return CType(Me.Rows(index),Tbl_DenominacionRow)
            End Get
        End Property
        
        Public Event Tbl_DenominacionRowChanging As Tbl_DenominacionRowChangeEventHandler
        
        Public Event Tbl_DenominacionRowChanged As Tbl_DenominacionRowChangeEventHandler
        
        Public Event Tbl_DenominacionRowDeleting As Tbl_DenominacionRowChangeEventHandler
        
        Public Event Tbl_DenominacionRowDeleted As Tbl_DenominacionRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTbl_DenominacionRow(ByVal row As Tbl_DenominacionRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTbl_DenominacionRow(ByVal Denominacion As Decimal, ByVal Cantidad As Decimal, ByVal Importe As Decimal) As Tbl_DenominacionRow
            Dim rowTbl_DenominacionRow As Tbl_DenominacionRow = CType(Me.NewRow,Tbl_DenominacionRow)
            Dim columnValuesArray() As Object = New Object() {Denominacion, Cantidad, Importe}
            rowTbl_DenominacionRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTbl_DenominacionRow)
            Return rowTbl_DenominacionRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Tbl_DenominacionDataTable = CType(MyBase.Clone,Tbl_DenominacionDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Tbl_DenominacionDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnDenominacion = MyBase.Columns("Denominacion")
            Me.columnCantidad = MyBase.Columns("Cantidad")
            Me.columnImporte = MyBase.Columns("Importe")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnDenominacion = New Global.System.Data.DataColumn("Denominacion", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDenominacion)
            Me.columnCantidad = New Global.System.Data.DataColumn("Cantidad", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCantidad)
            Me.columnImporte = New Global.System.Data.DataColumn("Importe", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnImporte)
            Me.columnDenominacion.AllowDBNull = false
            Me.columnCantidad.ReadOnly = true
            Me.columnImporte.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTbl_DenominacionRow() As Tbl_DenominacionRow
            Return CType(Me.NewRow,Tbl_DenominacionRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Tbl_DenominacionRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Tbl_DenominacionRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Tbl_DenominacionRowChangedEvent) Is Nothing) Then
                RaiseEvent Tbl_DenominacionRowChanged(Me, New Tbl_DenominacionRowChangeEvent(CType(e.Row,Tbl_DenominacionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Tbl_DenominacionRowChangingEvent) Is Nothing) Then
                RaiseEvent Tbl_DenominacionRowChanging(Me, New Tbl_DenominacionRowChangeEvent(CType(e.Row,Tbl_DenominacionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Tbl_DenominacionRowDeletedEvent) Is Nothing) Then
                RaiseEvent Tbl_DenominacionRowDeleted(Me, New Tbl_DenominacionRowChangeEvent(CType(e.Row,Tbl_DenominacionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Tbl_DenominacionRowDeletingEvent) Is Nothing) Then
                RaiseEvent Tbl_DenominacionRowDeleting(Me, New Tbl_DenominacionRowChangeEvent(CType(e.Row,Tbl_DenominacionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTbl_DenominacionRow(ByVal row As Tbl_DenominacionRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ds_Reportes = New ds_Reportes
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Tbl_DenominacionDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Cat_SucursalesDataTable
        Inherits Global.System.Data.TypedTableBase(Of Cat_SucursalesRow)
        
        Private columnId_Sucursal As Global.System.Data.DataColumn
        
        Private columnId_Empresa As Global.System.Data.DataColumn
        
        Private columnClave_Sucursal As Global.System.Data.DataColumn
        
        Private columnNombre As Global.System.Data.DataColumn
        
        Private columnDireccion As Global.System.Data.DataColumn
        
        Private columnId_Ciudad As Global.System.Data.DataColumn
        
        Private columnUsuario_Gerente As Global.System.Data.DataColumn
        
        Private columnLinea_Rproceso As Global.System.Data.DataColumn
        
        Private columnLinea_Rruta As Global.System.Data.DataColumn
        
        Private columnPro_ManipulaMorralla As Global.System.Data.DataColumn
        
        Private columnClasifica_Verificador As Global.System.Data.DataColumn
        
        Private columnCliente_Banxico As Global.System.Data.DataColumn
        
        Private columnMoneda_Local As Global.System.Data.DataColumn
        
        Private columnUlt_Cliente As Global.System.Data.DataColumn
        
        Private columnUlt_Prospecto As Global.System.Data.DataColumn
        
        Private columnUlt_Acta As Global.System.Data.DataColumn
        
        Private columnTimer_Monitoreo As Global.System.Data.DataColumn
        
        Private columnLogo As Global.System.Data.DataColumn
        
        Private columnStatus As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Cat_Sucursales"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Id_SucursalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnId_Sucursal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Id_EmpresaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnId_Empresa
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Clave_SucursalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClave_Sucursal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DireccionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDireccion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Id_CiudadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnId_Ciudad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Usuario_GerenteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUsuario_Gerente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Linea_RprocesoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLinea_Rproceso
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Linea_RrutaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLinea_Rruta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Pro_ManipulaMorrallaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPro_ManipulaMorralla
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Clasifica_VerificadorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClasifica_Verificador
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Cliente_BanxicoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCliente_Banxico
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Moneda_LocalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMoneda_Local
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Ult_ClienteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUlt_Cliente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Ult_ProspectoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUlt_Prospecto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Ult_ActaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUlt_Acta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Timer_MonitoreoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTimer_Monitoreo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LogoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLogo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Cat_SucursalesRow
            Get
                Return CType(Me.Rows(index),Cat_SucursalesRow)
            End Get
        End Property
        
        Public Event Cat_SucursalesRowChanging As Cat_SucursalesRowChangeEventHandler
        
        Public Event Cat_SucursalesRowChanged As Cat_SucursalesRowChangeEventHandler
        
        Public Event Cat_SucursalesRowDeleting As Cat_SucursalesRowChangeEventHandler
        
        Public Event Cat_SucursalesRowDeleted As Cat_SucursalesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCat_SucursalesRow(ByVal row As Cat_SucursalesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCat_SucursalesRow( _
                    ByVal Id_Empresa As Decimal,  _
                    ByVal Clave_Sucursal As String,  _
                    ByVal Nombre As String,  _
                    ByVal Direccion As String,  _
                    ByVal Id_Ciudad As Decimal,  _
                    ByVal Usuario_Gerente As Decimal,  _
                    ByVal Linea_Rproceso As Decimal,  _
                    ByVal Linea_Rruta As Decimal,  _
                    ByVal Pro_ManipulaMorralla As String,  _
                    ByVal Clasifica_Verificador As String,  _
                    ByVal Cliente_Banxico As Decimal,  _
                    ByVal Moneda_Local As Decimal,  _
                    ByVal Ult_Cliente As Decimal,  _
                    ByVal Ult_Prospecto As Decimal,  _
                    ByVal Ult_Acta As Decimal,  _
                    ByVal Timer_Monitoreo As Byte,  _
                    ByVal Logo() As Byte,  _
                    ByVal Status As String) As Cat_SucursalesRow
            Dim rowCat_SucursalesRow As Cat_SucursalesRow = CType(Me.NewRow,Cat_SucursalesRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Id_Empresa, Clave_Sucursal, Nombre, Direccion, Id_Ciudad, Usuario_Gerente, Linea_Rproceso, Linea_Rruta, Pro_ManipulaMorralla, Clasifica_Verificador, Cliente_Banxico, Moneda_Local, Ult_Cliente, Ult_Prospecto, Ult_Acta, Timer_Monitoreo, Logo, Status}
            rowCat_SucursalesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCat_SucursalesRow)
            Return rowCat_SucursalesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindById_Sucursal(ByVal Id_Sucursal As Decimal) As Cat_SucursalesRow
            Return CType(Me.Rows.Find(New Object() {Id_Sucursal}),Cat_SucursalesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Cat_SucursalesDataTable = CType(MyBase.Clone,Cat_SucursalesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Cat_SucursalesDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnId_Sucursal = MyBase.Columns("Id_Sucursal")
            Me.columnId_Empresa = MyBase.Columns("Id_Empresa")
            Me.columnClave_Sucursal = MyBase.Columns("Clave_Sucursal")
            Me.columnNombre = MyBase.Columns("Nombre")
            Me.columnDireccion = MyBase.Columns("Direccion")
            Me.columnId_Ciudad = MyBase.Columns("Id_Ciudad")
            Me.columnUsuario_Gerente = MyBase.Columns("Usuario_Gerente")
            Me.columnLinea_Rproceso = MyBase.Columns("Linea_Rproceso")
            Me.columnLinea_Rruta = MyBase.Columns("Linea_Rruta")
            Me.columnPro_ManipulaMorralla = MyBase.Columns("Pro_ManipulaMorralla")
            Me.columnClasifica_Verificador = MyBase.Columns("Clasifica_Verificador")
            Me.columnCliente_Banxico = MyBase.Columns("Cliente_Banxico")
            Me.columnMoneda_Local = MyBase.Columns("Moneda_Local")
            Me.columnUlt_Cliente = MyBase.Columns("Ult_Cliente")
            Me.columnUlt_Prospecto = MyBase.Columns("Ult_Prospecto")
            Me.columnUlt_Acta = MyBase.Columns("Ult_Acta")
            Me.columnTimer_Monitoreo = MyBase.Columns("Timer_Monitoreo")
            Me.columnLogo = MyBase.Columns("Logo")
            Me.columnStatus = MyBase.Columns("Status")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnId_Sucursal = New Global.System.Data.DataColumn("Id_Sucursal", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnId_Sucursal)
            Me.columnId_Empresa = New Global.System.Data.DataColumn("Id_Empresa", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnId_Empresa)
            Me.columnClave_Sucursal = New Global.System.Data.DataColumn("Clave_Sucursal", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClave_Sucursal)
            Me.columnNombre = New Global.System.Data.DataColumn("Nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombre)
            Me.columnDireccion = New Global.System.Data.DataColumn("Direccion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDireccion)
            Me.columnId_Ciudad = New Global.System.Data.DataColumn("Id_Ciudad", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnId_Ciudad)
            Me.columnUsuario_Gerente = New Global.System.Data.DataColumn("Usuario_Gerente", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUsuario_Gerente)
            Me.columnLinea_Rproceso = New Global.System.Data.DataColumn("Linea_Rproceso", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLinea_Rproceso)
            Me.columnLinea_Rruta = New Global.System.Data.DataColumn("Linea_Rruta", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLinea_Rruta)
            Me.columnPro_ManipulaMorralla = New Global.System.Data.DataColumn("Pro_ManipulaMorralla", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPro_ManipulaMorralla)
            Me.columnClasifica_Verificador = New Global.System.Data.DataColumn("Clasifica_Verificador", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClasifica_Verificador)
            Me.columnCliente_Banxico = New Global.System.Data.DataColumn("Cliente_Banxico", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCliente_Banxico)
            Me.columnMoneda_Local = New Global.System.Data.DataColumn("Moneda_Local", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMoneda_Local)
            Me.columnUlt_Cliente = New Global.System.Data.DataColumn("Ult_Cliente", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUlt_Cliente)
            Me.columnUlt_Prospecto = New Global.System.Data.DataColumn("Ult_Prospecto", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUlt_Prospecto)
            Me.columnUlt_Acta = New Global.System.Data.DataColumn("Ult_Acta", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUlt_Acta)
            Me.columnTimer_Monitoreo = New Global.System.Data.DataColumn("Timer_Monitoreo", GetType(Byte), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTimer_Monitoreo)
            Me.columnLogo = New Global.System.Data.DataColumn("Logo", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLogo)
            Me.columnStatus = New Global.System.Data.DataColumn("Status", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStatus)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnId_Sucursal}, true))
            Me.columnId_Sucursal.AutoIncrement = true
            Me.columnId_Sucursal.AutoIncrementSeed = -1
            Me.columnId_Sucursal.AutoIncrementStep = -1
            Me.columnId_Sucursal.AllowDBNull = false
            Me.columnId_Sucursal.ReadOnly = true
            Me.columnId_Sucursal.Unique = true
            Me.columnId_Empresa.AllowDBNull = false
            Me.columnClave_Sucursal.AllowDBNull = false
            Me.columnClave_Sucursal.MaxLength = 4
            Me.columnNombre.AllowDBNull = false
            Me.columnNombre.MaxLength = 150
            Me.columnDireccion.AllowDBNull = false
            Me.columnDireccion.MaxLength = 150
            Me.columnId_Ciudad.AllowDBNull = false
            Me.columnPro_ManipulaMorralla.MaxLength = 1
            Me.columnClasifica_Verificador.MaxLength = 1
            Me.columnStatus.AllowDBNull = false
            Me.columnStatus.MaxLength = 1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCat_SucursalesRow() As Cat_SucursalesRow
            Return CType(Me.NewRow,Cat_SucursalesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Cat_SucursalesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Cat_SucursalesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Cat_SucursalesRowChangedEvent) Is Nothing) Then
                RaiseEvent Cat_SucursalesRowChanged(Me, New Cat_SucursalesRowChangeEvent(CType(e.Row,Cat_SucursalesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Cat_SucursalesRowChangingEvent) Is Nothing) Then
                RaiseEvent Cat_SucursalesRowChanging(Me, New Cat_SucursalesRowChangeEvent(CType(e.Row,Cat_SucursalesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Cat_SucursalesRowDeletedEvent) Is Nothing) Then
                RaiseEvent Cat_SucursalesRowDeleted(Me, New Cat_SucursalesRowChangeEvent(CType(e.Row,Cat_SucursalesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Cat_SucursalesRowDeletingEvent) Is Nothing) Then
                RaiseEvent Cat_SucursalesRowDeleting(Me, New Cat_SucursalesRowChangeEvent(CType(e.Row,Cat_SucursalesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCat_SucursalesRow(ByVal row As Cat_SucursalesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ds_Reportes = New ds_Reportes
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Cat_SucursalesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Tbl_FichasDataTable
        Inherits Global.System.Data.TypedTableBase(Of Tbl_FichasRow)
        
        Private columnId_Ficha As Global.System.Data.DataColumn
        
        Private columnId_Servicio As Global.System.Data.DataColumn
        
        Private columnConsecutivo As Global.System.Data.DataColumn
        
        Private columnCuenta As Global.System.Data.DataColumn
        
        Private columnRemision As Global.System.Data.DataColumn
        
        Private columnReferencia As Global.System.Data.DataColumn
        
        Private columnDivisa As Global.System.Data.DataColumn
        
        Private columnIEfectivo As Global.System.Data.DataColumn
        
        Private columnIChequesP As Global.System.Data.DataColumn
        
        Private columnIChequesO As Global.System.Data.DataColumn
        
        Private columnITotal As Global.System.Data.DataColumn
        
        Private columnDTotal As Global.System.Data.DataColumn
        
        Private columnDEfectivo As Global.System.Data.DataColumn
        
        Private columnTipoD As Global.System.Data.DataColumn
        
        Private columnDiceContener As Global.System.Data.DataColumn
        
        Private columnConvenio As Global.System.Data.DataColumn
        
        Private columnFolioFicha As Global.System.Data.DataColumn
        
        Private columnContieneFalsos As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Tbl_Fichas"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Id_FichaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnId_Ficha
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Id_ServicioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnId_Servicio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ConsecutivoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnConsecutivo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CuentaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCuenta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RemisionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRemision
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReferenciaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReferencia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DivisaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDivisa
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IEfectivoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIEfectivo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IChequesPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIChequesP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IChequesOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIChequesO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ITotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnITotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DTotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDTotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DEfectivoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDEfectivo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipoD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DiceContenerColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDiceContener
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ConvenioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnConvenio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FolioFichaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFolioFicha
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ContieneFalsosColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnContieneFalsos
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Tbl_FichasRow
            Get
                Return CType(Me.Rows(index),Tbl_FichasRow)
            End Get
        End Property
        
        Public Event Tbl_FichasRowChanging As Tbl_FichasRowChangeEventHandler
        
        Public Event Tbl_FichasRowChanged As Tbl_FichasRowChangeEventHandler
        
        Public Event Tbl_FichasRowDeleting As Tbl_FichasRowChangeEventHandler
        
        Public Event Tbl_FichasRowDeleted As Tbl_FichasRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTbl_FichasRow(ByVal row As Tbl_FichasRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTbl_FichasRow( _
                    ByVal Id_Servicio As Decimal,  _
                    ByVal Consecutivo As Long,  _
                    ByVal Cuenta As String,  _
                    ByVal Remision As Decimal,  _
                    ByVal Referencia As String,  _
                    ByVal Divisa As String,  _
                    ByVal IEfectivo As Decimal,  _
                    ByVal IChequesP As Decimal,  _
                    ByVal IChequesO As Decimal,  _
                    ByVal ITotal As Decimal,  _
                    ByVal DTotal As Decimal,  _
                    ByVal DEfectivo As Decimal,  _
                    ByVal TipoD As String,  _
                    ByVal DiceContener As Decimal,  _
                    ByVal Convenio As String,  _
                    ByVal FolioFicha As String,  _
                    ByVal ContieneFalsos As String) As Tbl_FichasRow
            Dim rowTbl_FichasRow As Tbl_FichasRow = CType(Me.NewRow,Tbl_FichasRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Id_Servicio, Consecutivo, Cuenta, Remision, Referencia, Divisa, IEfectivo, IChequesP, IChequesO, ITotal, DTotal, DEfectivo, TipoD, DiceContener, Convenio, FolioFicha, ContieneFalsos}
            rowTbl_FichasRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTbl_FichasRow)
            Return rowTbl_FichasRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindById_Ficha(ByVal Id_Ficha As Decimal) As Tbl_FichasRow
            Return CType(Me.Rows.Find(New Object() {Id_Ficha}),Tbl_FichasRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Tbl_FichasDataTable = CType(MyBase.Clone,Tbl_FichasDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Tbl_FichasDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnId_Ficha = MyBase.Columns("Id_Ficha")
            Me.columnId_Servicio = MyBase.Columns("Id_Servicio")
            Me.columnConsecutivo = MyBase.Columns("Consecutivo")
            Me.columnCuenta = MyBase.Columns("Cuenta")
            Me.columnRemision = MyBase.Columns("Remision")
            Me.columnReferencia = MyBase.Columns("Referencia")
            Me.columnDivisa = MyBase.Columns("Divisa")
            Me.columnIEfectivo = MyBase.Columns("IEfectivo")
            Me.columnIChequesP = MyBase.Columns("IChequesP")
            Me.columnIChequesO = MyBase.Columns("IChequesO")
            Me.columnITotal = MyBase.Columns("ITotal")
            Me.columnDTotal = MyBase.Columns("DTotal")
            Me.columnDEfectivo = MyBase.Columns("DEfectivo")
            Me.columnTipoD = MyBase.Columns("TipoD")
            Me.columnDiceContener = MyBase.Columns("DiceContener")
            Me.columnConvenio = MyBase.Columns("Convenio")
            Me.columnFolioFicha = MyBase.Columns("FolioFicha")
            Me.columnContieneFalsos = MyBase.Columns("ContieneFalsos")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnId_Ficha = New Global.System.Data.DataColumn("Id_Ficha", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnId_Ficha)
            Me.columnId_Servicio = New Global.System.Data.DataColumn("Id_Servicio", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnId_Servicio)
            Me.columnConsecutivo = New Global.System.Data.DataColumn("Consecutivo", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnConsecutivo)
            Me.columnCuenta = New Global.System.Data.DataColumn("Cuenta", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCuenta)
            Me.columnRemision = New Global.System.Data.DataColumn("Remision", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRemision)
            Me.columnReferencia = New Global.System.Data.DataColumn("Referencia", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReferencia)
            Me.columnDivisa = New Global.System.Data.DataColumn("Divisa", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDivisa)
            Me.columnIEfectivo = New Global.System.Data.DataColumn("IEfectivo", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIEfectivo)
            Me.columnIChequesP = New Global.System.Data.DataColumn("IChequesP", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIChequesP)
            Me.columnIChequesO = New Global.System.Data.DataColumn("IChequesO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIChequesO)
            Me.columnITotal = New Global.System.Data.DataColumn("ITotal", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnITotal)
            Me.columnDTotal = New Global.System.Data.DataColumn("DTotal", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDTotal)
            Me.columnDEfectivo = New Global.System.Data.DataColumn("DEfectivo", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDEfectivo)
            Me.columnTipoD = New Global.System.Data.DataColumn("TipoD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipoD)
            Me.columnDiceContener = New Global.System.Data.DataColumn("DiceContener", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDiceContener)
            Me.columnConvenio = New Global.System.Data.DataColumn("Convenio", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnConvenio)
            Me.columnFolioFicha = New Global.System.Data.DataColumn("FolioFicha", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFolioFicha)
            Me.columnContieneFalsos = New Global.System.Data.DataColumn("ContieneFalsos", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnContieneFalsos)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnId_Ficha}, true))
            Me.columnId_Ficha.AutoIncrement = true
            Me.columnId_Ficha.AutoIncrementSeed = -1
            Me.columnId_Ficha.AutoIncrementStep = -1
            Me.columnId_Ficha.AllowDBNull = false
            Me.columnId_Ficha.ReadOnly = true
            Me.columnId_Ficha.Unique = true
            Me.columnId_Servicio.AllowDBNull = false
            Me.columnConsecutivo.ReadOnly = true
            Me.columnCuenta.ReadOnly = true
            Me.columnCuenta.MaxLength = 15
            Me.columnRemision.AllowDBNull = false
            Me.columnReferencia.ReadOnly = true
            Me.columnReferencia.MaxLength = 50
            Me.columnDivisa.ReadOnly = true
            Me.columnDivisa.MaxLength = 4
            Me.columnIEfectivo.ReadOnly = true
            Me.columnIChequesP.AllowDBNull = false
            Me.columnIChequesO.AllowDBNull = false
            Me.columnITotal.ReadOnly = true
            Me.columnDTotal.ReadOnly = true
            Me.columnDEfectivo.AllowDBNull = false
            Me.columnTipoD.ReadOnly = true
            Me.columnTipoD.MaxLength = 1
            Me.columnDiceContener.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTbl_FichasRow() As Tbl_FichasRow
            Return CType(Me.NewRow,Tbl_FichasRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Tbl_FichasRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Tbl_FichasRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Tbl_FichasRowChangedEvent) Is Nothing) Then
                RaiseEvent Tbl_FichasRowChanged(Me, New Tbl_FichasRowChangeEvent(CType(e.Row,Tbl_FichasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Tbl_FichasRowChangingEvent) Is Nothing) Then
                RaiseEvent Tbl_FichasRowChanging(Me, New Tbl_FichasRowChangeEvent(CType(e.Row,Tbl_FichasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Tbl_FichasRowDeletedEvent) Is Nothing) Then
                RaiseEvent Tbl_FichasRowDeleted(Me, New Tbl_FichasRowChangeEvent(CType(e.Row,Tbl_FichasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Tbl_FichasRowDeletingEvent) Is Nothing) Then
                RaiseEvent Tbl_FichasRowDeleting(Me, New Tbl_FichasRowChangeEvent(CType(e.Row,Tbl_FichasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTbl_FichasRow(ByVal row As Tbl_FichasRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ds_Reportes = New ds_Reportes
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Tbl_FichasDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Tbl_ChequesDataTable
        Inherits Global.System.Data.TypedTableBase(Of Tbl_ChequesRow)
        
        Private columnId_Ficha As Global.System.Data.DataColumn
        
        Private columnMICR As Global.System.Data.DataColumn
        
        Private columnImporte As Global.System.Data.DataColumn
        
        Private columnPropio As Global.System.Data.DataColumn
        
        Private columnNumero_Valida As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Tbl_Cheques"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Id_FichaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnId_Ficha
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MICRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMICR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ImporteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnImporte
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PropioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPropio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Numero_ValidaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumero_Valida
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Tbl_ChequesRow
            Get
                Return CType(Me.Rows(index),Tbl_ChequesRow)
            End Get
        End Property
        
        Public Event Tbl_ChequesRowChanging As Tbl_ChequesRowChangeEventHandler
        
        Public Event Tbl_ChequesRowChanged As Tbl_ChequesRowChangeEventHandler
        
        Public Event Tbl_ChequesRowDeleting As Tbl_ChequesRowChangeEventHandler
        
        Public Event Tbl_ChequesRowDeleted As Tbl_ChequesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTbl_ChequesRow(ByVal row As Tbl_ChequesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTbl_ChequesRow(ByVal Id_Ficha As Decimal, ByVal MICR As String, ByVal Importe As Decimal, ByVal Propio As String, ByVal Numero_Valida As String) As Tbl_ChequesRow
            Dim rowTbl_ChequesRow As Tbl_ChequesRow = CType(Me.NewRow,Tbl_ChequesRow)
            Dim columnValuesArray() As Object = New Object() {Id_Ficha, MICR, Importe, Propio, Numero_Valida}
            rowTbl_ChequesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTbl_ChequesRow)
            Return rowTbl_ChequesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Tbl_ChequesDataTable = CType(MyBase.Clone,Tbl_ChequesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Tbl_ChequesDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnId_Ficha = MyBase.Columns("Id_Ficha")
            Me.columnMICR = MyBase.Columns("MICR")
            Me.columnImporte = MyBase.Columns("Importe")
            Me.columnPropio = MyBase.Columns("Propio")
            Me.columnNumero_Valida = MyBase.Columns("Numero_Valida")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnId_Ficha = New Global.System.Data.DataColumn("Id_Ficha", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnId_Ficha)
            Me.columnMICR = New Global.System.Data.DataColumn("MICR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMICR)
            Me.columnImporte = New Global.System.Data.DataColumn("Importe", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnImporte)
            Me.columnPropio = New Global.System.Data.DataColumn("Propio", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPropio)
            Me.columnNumero_Valida = New Global.System.Data.DataColumn("Numero_Valida", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumero_Valida)
            Me.columnId_Ficha.AllowDBNull = false
            Me.columnMICR.AllowDBNull = false
            Me.columnMICR.MaxLength = 40
            Me.columnImporte.AllowDBNull = false
            Me.columnPropio.AllowDBNull = false
            Me.columnPropio.MaxLength = 1
            Me.columnNumero_Valida.AllowDBNull = false
            Me.columnNumero_Valida.DefaultValue = CType("",String)
            Me.columnNumero_Valida.MaxLength = 15
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTbl_ChequesRow() As Tbl_ChequesRow
            Return CType(Me.NewRow,Tbl_ChequesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Tbl_ChequesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Tbl_ChequesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Tbl_ChequesRowChangedEvent) Is Nothing) Then
                RaiseEvent Tbl_ChequesRowChanged(Me, New Tbl_ChequesRowChangeEvent(CType(e.Row,Tbl_ChequesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Tbl_ChequesRowChangingEvent) Is Nothing) Then
                RaiseEvent Tbl_ChequesRowChanging(Me, New Tbl_ChequesRowChangeEvent(CType(e.Row,Tbl_ChequesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Tbl_ChequesRowDeletedEvent) Is Nothing) Then
                RaiseEvent Tbl_ChequesRowDeleted(Me, New Tbl_ChequesRowChangeEvent(CType(e.Row,Tbl_ChequesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Tbl_ChequesRowDeletingEvent) Is Nothing) Then
                RaiseEvent Tbl_ChequesRowDeleting(Me, New Tbl_ChequesRowChangeEvent(CType(e.Row,Tbl_ChequesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTbl_ChequesRow(ByVal row As Tbl_ChequesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ds_Reportes = New ds_Reportes
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Tbl_ChequesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Tbl_FichasEfectivoDataTable
        Inherits Global.System.Data.TypedTableBase(Of Tbl_FichasEfectivoRow)
        
        Private columnId_Ficha As Global.System.Data.DataColumn
        
        Private columnDenominacion As Global.System.Data.DataColumn
        
        Private columnCantidad As Global.System.Data.DataColumn
        
        Private columnImporte As Global.System.Data.DataColumn
        
        Private columnPresentacion As Global.System.Data.DataColumn
        
        Private columnId_Denominacion As Global.System.Data.DataColumn
        
        Private columnDenominacionBanco As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Tbl_FichasEfectivo"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Id_FichaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnId_Ficha
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DenominacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDenominacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CantidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCantidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ImporteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnImporte
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PresentacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPresentacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Id_DenominacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnId_Denominacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DenominacionBancoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDenominacionBanco
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Tbl_FichasEfectivoRow
            Get
                Return CType(Me.Rows(index),Tbl_FichasEfectivoRow)
            End Get
        End Property
        
        Public Event Tbl_FichasEfectivoRowChanging As Tbl_FichasEfectivoRowChangeEventHandler
        
        Public Event Tbl_FichasEfectivoRowChanged As Tbl_FichasEfectivoRowChangeEventHandler
        
        Public Event Tbl_FichasEfectivoRowDeleting As Tbl_FichasEfectivoRowChangeEventHandler
        
        Public Event Tbl_FichasEfectivoRowDeleted As Tbl_FichasEfectivoRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTbl_FichasEfectivoRow(ByVal row As Tbl_FichasEfectivoRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTbl_FichasEfectivoRow(ByVal Denominacion As Decimal, ByVal Cantidad As Decimal, ByVal Importe As Decimal, ByVal Presentacion As String, ByVal DenominacionBanco As String) As Tbl_FichasEfectivoRow
            Dim rowTbl_FichasEfectivoRow As Tbl_FichasEfectivoRow = CType(Me.NewRow,Tbl_FichasEfectivoRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Denominacion, Cantidad, Importe, Presentacion, Nothing, DenominacionBanco}
            rowTbl_FichasEfectivoRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTbl_FichasEfectivoRow)
            Return rowTbl_FichasEfectivoRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Tbl_FichasEfectivoDataTable = CType(MyBase.Clone,Tbl_FichasEfectivoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Tbl_FichasEfectivoDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnId_Ficha = MyBase.Columns("Id_Ficha")
            Me.columnDenominacion = MyBase.Columns("Denominacion")
            Me.columnCantidad = MyBase.Columns("Cantidad")
            Me.columnImporte = MyBase.Columns("Importe")
            Me.columnPresentacion = MyBase.Columns("Presentacion")
            Me.columnId_Denominacion = MyBase.Columns("Id_Denominacion")
            Me.columnDenominacionBanco = MyBase.Columns("DenominacionBanco")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnId_Ficha = New Global.System.Data.DataColumn("Id_Ficha", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnId_Ficha)
            Me.columnDenominacion = New Global.System.Data.DataColumn("Denominacion", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDenominacion)
            Me.columnCantidad = New Global.System.Data.DataColumn("Cantidad", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCantidad)
            Me.columnImporte = New Global.System.Data.DataColumn("Importe", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnImporte)
            Me.columnPresentacion = New Global.System.Data.DataColumn("Presentacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPresentacion)
            Me.columnId_Denominacion = New Global.System.Data.DataColumn("Id_Denominacion", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnId_Denominacion)
            Me.columnDenominacionBanco = New Global.System.Data.DataColumn("DenominacionBanco", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDenominacionBanco)
            Me.columnId_Ficha.AutoIncrement = true
            Me.columnId_Ficha.AutoIncrementSeed = -1
            Me.columnId_Ficha.AutoIncrementStep = -1
            Me.columnId_Ficha.AllowDBNull = false
            Me.columnId_Ficha.ReadOnly = true
            Me.columnDenominacion.AllowDBNull = false
            Me.columnCantidad.AllowDBNull = false
            Me.columnImporte.ReadOnly = true
            Me.columnPresentacion.AllowDBNull = false
            Me.columnPresentacion.MaxLength = 1
            Me.columnId_Denominacion.AutoIncrement = true
            Me.columnId_Denominacion.AutoIncrementSeed = -1
            Me.columnId_Denominacion.AutoIncrementStep = -1
            Me.columnId_Denominacion.AllowDBNull = false
            Me.columnId_Denominacion.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTbl_FichasEfectivoRow() As Tbl_FichasEfectivoRow
            Return CType(Me.NewRow,Tbl_FichasEfectivoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Tbl_FichasEfectivoRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Tbl_FichasEfectivoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Tbl_FichasEfectivoRowChangedEvent) Is Nothing) Then
                RaiseEvent Tbl_FichasEfectivoRowChanged(Me, New Tbl_FichasEfectivoRowChangeEvent(CType(e.Row,Tbl_FichasEfectivoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Tbl_FichasEfectivoRowChangingEvent) Is Nothing) Then
                RaiseEvent Tbl_FichasEfectivoRowChanging(Me, New Tbl_FichasEfectivoRowChangeEvent(CType(e.Row,Tbl_FichasEfectivoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Tbl_FichasEfectivoRowDeletedEvent) Is Nothing) Then
                RaiseEvent Tbl_FichasEfectivoRowDeleted(Me, New Tbl_FichasEfectivoRowChangeEvent(CType(e.Row,Tbl_FichasEfectivoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Tbl_FichasEfectivoRowDeletingEvent) Is Nothing) Then
                RaiseEvent Tbl_FichasEfectivoRowDeleting(Me, New Tbl_FichasEfectivoRowChangeEvent(CType(e.Row,Tbl_FichasEfectivoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTbl_FichasEfectivoRow(ByVal row As Tbl_FichasEfectivoRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ds_Reportes = New ds_Reportes
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Tbl_FichasEfectivoDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Tbl_TabularDataTable
        Inherits Global.System.Data.TypedTableBase(Of Tbl_TabularRow)
        
        Private columnNumero_Remision As Global.System.Data.DataColumn
        
        Private columnCaja_Bancaria As Global.System.Data.DataColumn
        
        Private columnMoneda As Global.System.Data.DataColumn
        
        Private columnPresentacion As Global.System.Data.DataColumn
        
        Private columnId_Moneda As Global.System.Data.DataColumn
        
        Private columnDenominacion As Global.System.Data.DataColumn
        
        Private columnCantidad As Global.System.Data.DataColumn
        
        Private columnImporte As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Tbl_Tabular"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Numero_RemisionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumero_Remision
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Caja_BancariaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCaja_Bancaria
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PresentacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPresentacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Id_MonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnId_Moneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DenominacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDenominacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CantidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCantidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ImporteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnImporte
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Tbl_TabularRow
            Get
                Return CType(Me.Rows(index),Tbl_TabularRow)
            End Get
        End Property
        
        Public Event Tbl_TabularRowChanging As Tbl_TabularRowChangeEventHandler
        
        Public Event Tbl_TabularRowChanged As Tbl_TabularRowChangeEventHandler
        
        Public Event Tbl_TabularRowDeleting As Tbl_TabularRowChangeEventHandler
        
        Public Event Tbl_TabularRowDeleted As Tbl_TabularRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTbl_TabularRow(ByVal row As Tbl_TabularRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTbl_TabularRow(ByVal Numero_Remision As Decimal, ByVal Caja_Bancaria As String, ByVal Moneda As String, ByVal Presentacion As String, ByVal Id_Moneda As Decimal, ByVal Denominacion As Decimal, ByVal Cantidad As Decimal, ByVal Importe As Decimal) As Tbl_TabularRow
            Dim rowTbl_TabularRow As Tbl_TabularRow = CType(Me.NewRow,Tbl_TabularRow)
            Dim columnValuesArray() As Object = New Object() {Numero_Remision, Caja_Bancaria, Moneda, Presentacion, Id_Moneda, Denominacion, Cantidad, Importe}
            rowTbl_TabularRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTbl_TabularRow)
            Return rowTbl_TabularRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Tbl_TabularDataTable = CType(MyBase.Clone,Tbl_TabularDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Tbl_TabularDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnNumero_Remision = MyBase.Columns("Numero_Remision")
            Me.columnCaja_Bancaria = MyBase.Columns("Caja Bancaria")
            Me.columnMoneda = MyBase.Columns("Moneda")
            Me.columnPresentacion = MyBase.Columns("Presentacion")
            Me.columnId_Moneda = MyBase.Columns("Id_Moneda")
            Me.columnDenominacion = MyBase.Columns("Denominacion")
            Me.columnCantidad = MyBase.Columns("Cantidad")
            Me.columnImporte = MyBase.Columns("Importe")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnNumero_Remision = New Global.System.Data.DataColumn("Numero_Remision", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumero_Remision)
            Me.columnCaja_Bancaria = New Global.System.Data.DataColumn("Caja Bancaria", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCaja_Bancaria)
            Me.columnMoneda = New Global.System.Data.DataColumn("Moneda", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMoneda)
            Me.columnPresentacion = New Global.System.Data.DataColumn("Presentacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPresentacion)
            Me.columnId_Moneda = New Global.System.Data.DataColumn("Id_Moneda", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnId_Moneda)
            Me.columnDenominacion = New Global.System.Data.DataColumn("Denominacion", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDenominacion)
            Me.columnCantidad = New Global.System.Data.DataColumn("Cantidad", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCantidad)
            Me.columnImporte = New Global.System.Data.DataColumn("Importe", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnImporte)
            Me.columnNumero_Remision.AllowDBNull = false
            Me.columnCaja_Bancaria.AllowDBNull = false
            Me.columnCaja_Bancaria.MaxLength = 150
            Me.columnMoneda.AllowDBNull = false
            Me.columnMoneda.MaxLength = 50
            Me.columnPresentacion.AllowDBNull = false
            Me.columnPresentacion.MaxLength = 1
            Me.columnId_Moneda.AllowDBNull = false
            Me.columnDenominacion.AllowDBNull = false
            Me.columnCantidad.ReadOnly = true
            Me.columnImporte.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTbl_TabularRow() As Tbl_TabularRow
            Return CType(Me.NewRow,Tbl_TabularRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Tbl_TabularRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Tbl_TabularRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Tbl_TabularRowChangedEvent) Is Nothing) Then
                RaiseEvent Tbl_TabularRowChanged(Me, New Tbl_TabularRowChangeEvent(CType(e.Row,Tbl_TabularRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Tbl_TabularRowChangingEvent) Is Nothing) Then
                RaiseEvent Tbl_TabularRowChanging(Me, New Tbl_TabularRowChangeEvent(CType(e.Row,Tbl_TabularRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Tbl_TabularRowDeletedEvent) Is Nothing) Then
                RaiseEvent Tbl_TabularRowDeleted(Me, New Tbl_TabularRowChangeEvent(CType(e.Row,Tbl_TabularRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Tbl_TabularRowDeletingEvent) Is Nothing) Then
                RaiseEvent Tbl_TabularRowDeleting(Me, New Tbl_TabularRowChangeEvent(CType(e.Row,Tbl_TabularRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTbl_TabularRow(ByVal row As Tbl_TabularRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ds_Reportes = New ds_Reportes
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Tbl_TabularDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Tbl_TabularFichaDataTable
        Inherits Global.System.Data.TypedTableBase(Of Tbl_TabularFichaRow)
        
        Private columnId_Ficha As Global.System.Data.DataColumn
        
        Private columnNumero_Remision As Global.System.Data.DataColumn
        
        Private columnCaja_Bancaria As Global.System.Data.DataColumn
        
        Private columnFicha As Global.System.Data.DataColumn
        
        Private columnCuenta As Global.System.Data.DataColumn
        
        Private columnMoneda As Global.System.Data.DataColumn
        
        Private columnEfectivo As Global.System.Data.DataColumn
        
        Private columnDiferencia As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Tbl_TabularFicha"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Id_FichaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnId_Ficha
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Numero_RemisionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumero_Remision
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Caja_BancariaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCaja_Bancaria
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FichaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFicha
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CuentaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCuenta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EfectivoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEfectivo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DiferenciaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDiferencia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Tbl_TabularFichaRow
            Get
                Return CType(Me.Rows(index),Tbl_TabularFichaRow)
            End Get
        End Property
        
        Public Event Tbl_TabularFichaRowChanging As Tbl_TabularFichaRowChangeEventHandler
        
        Public Event Tbl_TabularFichaRowChanged As Tbl_TabularFichaRowChangeEventHandler
        
        Public Event Tbl_TabularFichaRowDeleting As Tbl_TabularFichaRowChangeEventHandler
        
        Public Event Tbl_TabularFichaRowDeleted As Tbl_TabularFichaRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTbl_TabularFichaRow(ByVal row As Tbl_TabularFichaRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTbl_TabularFichaRow(ByVal Numero_Remision As Decimal, ByVal Caja_Bancaria As String, ByVal Ficha As Decimal, ByVal Cuenta As String, ByVal Moneda As String, ByVal Efectivo As Decimal, ByVal Diferencia As Decimal) As Tbl_TabularFichaRow
            Dim rowTbl_TabularFichaRow As Tbl_TabularFichaRow = CType(Me.NewRow,Tbl_TabularFichaRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Numero_Remision, Caja_Bancaria, Ficha, Cuenta, Moneda, Efectivo, Diferencia}
            rowTbl_TabularFichaRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTbl_TabularFichaRow)
            Return rowTbl_TabularFichaRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Tbl_TabularFichaDataTable = CType(MyBase.Clone,Tbl_TabularFichaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Tbl_TabularFichaDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnId_Ficha = MyBase.Columns("Id_Ficha")
            Me.columnNumero_Remision = MyBase.Columns("Numero_Remision")
            Me.columnCaja_Bancaria = MyBase.Columns("Caja Bancaria")
            Me.columnFicha = MyBase.Columns("Ficha")
            Me.columnCuenta = MyBase.Columns("Cuenta")
            Me.columnMoneda = MyBase.Columns("Moneda")
            Me.columnEfectivo = MyBase.Columns("Efectivo")
            Me.columnDiferencia = MyBase.Columns("Diferencia")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnId_Ficha = New Global.System.Data.DataColumn("Id_Ficha", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnId_Ficha)
            Me.columnNumero_Remision = New Global.System.Data.DataColumn("Numero_Remision", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumero_Remision)
            Me.columnCaja_Bancaria = New Global.System.Data.DataColumn("Caja Bancaria", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCaja_Bancaria)
            Me.columnFicha = New Global.System.Data.DataColumn("Ficha", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFicha)
            Me.columnCuenta = New Global.System.Data.DataColumn("Cuenta", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCuenta)
            Me.columnMoneda = New Global.System.Data.DataColumn("Moneda", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMoneda)
            Me.columnEfectivo = New Global.System.Data.DataColumn("Efectivo", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEfectivo)
            Me.columnDiferencia = New Global.System.Data.DataColumn("Diferencia", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDiferencia)
            Me.columnId_Ficha.AutoIncrement = true
            Me.columnId_Ficha.AutoIncrementSeed = -1
            Me.columnId_Ficha.AutoIncrementStep = -1
            Me.columnId_Ficha.AllowDBNull = false
            Me.columnId_Ficha.ReadOnly = true
            Me.columnNumero_Remision.AllowDBNull = false
            Me.columnCaja_Bancaria.AllowDBNull = false
            Me.columnCaja_Bancaria.MaxLength = 150
            Me.columnFicha.AllowDBNull = false
            Me.columnCuenta.AllowDBNull = false
            Me.columnCuenta.MaxLength = 15
            Me.columnMoneda.AllowDBNull = false
            Me.columnMoneda.MaxLength = 50
            Me.columnEfectivo.AllowDBNull = false
            Me.columnDiferencia.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTbl_TabularFichaRow() As Tbl_TabularFichaRow
            Return CType(Me.NewRow,Tbl_TabularFichaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Tbl_TabularFichaRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Tbl_TabularFichaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Tbl_TabularFichaRowChangedEvent) Is Nothing) Then
                RaiseEvent Tbl_TabularFichaRowChanged(Me, New Tbl_TabularFichaRowChangeEvent(CType(e.Row,Tbl_TabularFichaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Tbl_TabularFichaRowChangingEvent) Is Nothing) Then
                RaiseEvent Tbl_TabularFichaRowChanging(Me, New Tbl_TabularFichaRowChangeEvent(CType(e.Row,Tbl_TabularFichaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Tbl_TabularFichaRowDeletedEvent) Is Nothing) Then
                RaiseEvent Tbl_TabularFichaRowDeleted(Me, New Tbl_TabularFichaRowChangeEvent(CType(e.Row,Tbl_TabularFichaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Tbl_TabularFichaRowDeletingEvent) Is Nothing) Then
                RaiseEvent Tbl_TabularFichaRowDeleting(Me, New Tbl_TabularFichaRowChangeEvent(CType(e.Row,Tbl_TabularFichaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTbl_TabularFichaRow(ByVal row As Tbl_TabularFichaRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ds_Reportes = New ds_Reportes
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Tbl_TabularFichaDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Tbl_DenominacionesFichasDataTable
        Inherits Global.System.Data.TypedTableBase(Of Tbl_DenominacionesFichasRow)
        
        Private columnId_Ficha As Global.System.Data.DataColumn
        
        Private columnPresentacion As Global.System.Data.DataColumn
        
        Private columnDenominacion As Global.System.Data.DataColumn
        
        Private columnCantidad As Global.System.Data.DataColumn
        
        Private columnImporte As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Tbl_DenominacionesFichas"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Id_FichaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnId_Ficha
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PresentacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPresentacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DenominacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDenominacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CantidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCantidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ImporteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnImporte
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Tbl_DenominacionesFichasRow
            Get
                Return CType(Me.Rows(index),Tbl_DenominacionesFichasRow)
            End Get
        End Property
        
        Public Event Tbl_DenominacionesFichasRowChanging As Tbl_DenominacionesFichasRowChangeEventHandler
        
        Public Event Tbl_DenominacionesFichasRowChanged As Tbl_DenominacionesFichasRowChangeEventHandler
        
        Public Event Tbl_DenominacionesFichasRowDeleting As Tbl_DenominacionesFichasRowChangeEventHandler
        
        Public Event Tbl_DenominacionesFichasRowDeleted As Tbl_DenominacionesFichasRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTbl_DenominacionesFichasRow(ByVal row As Tbl_DenominacionesFichasRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTbl_DenominacionesFichasRow(ByVal Id_Ficha As Decimal, ByVal Presentacion As String, ByVal Denominacion As Decimal, ByVal Cantidad As Decimal, ByVal Importe As Decimal) As Tbl_DenominacionesFichasRow
            Dim rowTbl_DenominacionesFichasRow As Tbl_DenominacionesFichasRow = CType(Me.NewRow,Tbl_DenominacionesFichasRow)
            Dim columnValuesArray() As Object = New Object() {Id_Ficha, Presentacion, Denominacion, Cantidad, Importe}
            rowTbl_DenominacionesFichasRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTbl_DenominacionesFichasRow)
            Return rowTbl_DenominacionesFichasRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Tbl_DenominacionesFichasDataTable = CType(MyBase.Clone,Tbl_DenominacionesFichasDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Tbl_DenominacionesFichasDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnId_Ficha = MyBase.Columns("Id_Ficha")
            Me.columnPresentacion = MyBase.Columns("Presentacion")
            Me.columnDenominacion = MyBase.Columns("Denominacion")
            Me.columnCantidad = MyBase.Columns("Cantidad")
            Me.columnImporte = MyBase.Columns("Importe")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnId_Ficha = New Global.System.Data.DataColumn("Id_Ficha", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnId_Ficha)
            Me.columnPresentacion = New Global.System.Data.DataColumn("Presentacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPresentacion)
            Me.columnDenominacion = New Global.System.Data.DataColumn("Denominacion", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDenominacion)
            Me.columnCantidad = New Global.System.Data.DataColumn("Cantidad", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCantidad)
            Me.columnImporte = New Global.System.Data.DataColumn("Importe", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnImporte)
            Me.columnId_Ficha.AutoIncrementSeed = -1
            Me.columnId_Ficha.AutoIncrementStep = -1
            Me.columnId_Ficha.AllowDBNull = false
            Me.columnPresentacion.AllowDBNull = false
            Me.columnPresentacion.MaxLength = 1
            Me.columnDenominacion.AllowDBNull = false
            Me.columnCantidad.AllowDBNull = false
            Me.columnImporte.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTbl_DenominacionesFichasRow() As Tbl_DenominacionesFichasRow
            Return CType(Me.NewRow,Tbl_DenominacionesFichasRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Tbl_DenominacionesFichasRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Tbl_DenominacionesFichasRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Tbl_DenominacionesFichasRowChangedEvent) Is Nothing) Then
                RaiseEvent Tbl_DenominacionesFichasRowChanged(Me, New Tbl_DenominacionesFichasRowChangeEvent(CType(e.Row,Tbl_DenominacionesFichasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Tbl_DenominacionesFichasRowChangingEvent) Is Nothing) Then
                RaiseEvent Tbl_DenominacionesFichasRowChanging(Me, New Tbl_DenominacionesFichasRowChangeEvent(CType(e.Row,Tbl_DenominacionesFichasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Tbl_DenominacionesFichasRowDeletedEvent) Is Nothing) Then
                RaiseEvent Tbl_DenominacionesFichasRowDeleted(Me, New Tbl_DenominacionesFichasRowChangeEvent(CType(e.Row,Tbl_DenominacionesFichasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Tbl_DenominacionesFichasRowDeletingEvent) Is Nothing) Then
                RaiseEvent Tbl_DenominacionesFichasRowDeleting(Me, New Tbl_DenominacionesFichasRowChangeEvent(CType(e.Row,Tbl_DenominacionesFichasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTbl_DenominacionesFichasRow(ByVal row As Tbl_DenominacionesFichasRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ds_Reportes = New ds_Reportes
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Tbl_DenominacionesFichasDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tbl_ActaDiferenciaDataTable
        Inherits Global.System.Data.TypedTableBase(Of tbl_ActaDiferenciaRow)
        
        Private columnFolio As Global.System.Data.DataColumn
        
        Private columnFecha As Global.System.Data.DataColumn
        
        Private columnTipoDiferencia As Global.System.Data.DataColumn
        
        Private columnDiferencia As Global.System.Data.DataColumn
        
        Private columnDiferenciaLetras As Global.System.Data.DataColumn
        
        Private columnCliente As Global.System.Data.DataColumn
        
        Private columnCaja As Global.System.Data.DataColumn
        
        Private columnRemision As Global.System.Data.DataColumn
        
        Private columnFechaRemision As Global.System.Data.DataColumn
        
        Private columnDiceContener As Global.System.Data.DataColumn
        
        Private columnDiceContenerLetras As Global.System.Data.DataColumn
        
        Private columnImporteReal As Global.System.Data.DataColumn
        
        Private columnImporteRealLetras As Global.System.Data.DataColumn
        
        Private columnCajero As Global.System.Data.DataColumn
        
        Private columnSupervisor As Global.System.Data.DataColumn
        
        Private columnComentarios As Global.System.Data.DataColumn
        
        Private columnComentarios_Valida As Global.System.Data.DataColumn
        
        Private columnId_Remision As Global.System.Data.DataColumn
        
        Private columnHora As Global.System.Data.DataColumn
        
        Private columnId_Servicio As Global.System.Data.DataColumn
        
        Private columnCubiculo As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tbl_ActaDiferencia"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FolioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFolio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFecha
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoDiferenciaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipoDiferencia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DiferenciaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDiferencia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DiferenciaLetrasColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDiferenciaLetras
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClienteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCliente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CajaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCaja
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RemisionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRemision
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaRemisionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaRemision
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DiceContenerColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDiceContener
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DiceContenerLetrasColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDiceContenerLetras
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ImporteRealColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnImporteReal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ImporteRealLetrasColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnImporteRealLetras
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CajeroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCajero
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SupervisorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSupervisor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ComentariosColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnComentarios
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Comentarios_ValidaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnComentarios_Valida
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Id_RemisionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnId_Remision
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HoraColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHora
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Id_ServicioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnId_Servicio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CubiculoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCubiculo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tbl_ActaDiferenciaRow
            Get
                Return CType(Me.Rows(index),tbl_ActaDiferenciaRow)
            End Get
        End Property
        
        Public Event tbl_ActaDiferenciaRowChanging As tbl_ActaDiferenciaRowChangeEventHandler
        
        Public Event tbl_ActaDiferenciaRowChanged As tbl_ActaDiferenciaRowChangeEventHandler
        
        Public Event tbl_ActaDiferenciaRowDeleting As tbl_ActaDiferenciaRowChangeEventHandler
        
        Public Event tbl_ActaDiferenciaRowDeleted As tbl_ActaDiferenciaRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addtbl_ActaDiferenciaRow(ByVal row As tbl_ActaDiferenciaRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addtbl_ActaDiferenciaRow( _
                    ByVal Folio As String,  _
                    ByVal Fecha As String,  _
                    ByVal TipoDiferencia As String,  _
                    ByVal Diferencia As String,  _
                    ByVal DiferenciaLetras As String,  _
                    ByVal Cliente As String,  _
                    ByVal Caja As String,  _
                    ByVal Remision As String,  _
                    ByVal FechaRemision As String,  _
                    ByVal DiceContener As String,  _
                    ByVal DiceContenerLetras As String,  _
                    ByVal ImporteReal As String,  _
                    ByVal ImporteRealLetras As String,  _
                    ByVal Cajero As String,  _
                    ByVal Supervisor As String,  _
                    ByVal Comentarios As String,  _
                    ByVal Comentarios_Valida As String,  _
                    ByVal Id_Remision As String,  _
                    ByVal Hora As String,  _
                    ByVal Id_Servicio As String,  _
                    ByVal Cubiculo As String) As tbl_ActaDiferenciaRow
            Dim rowtbl_ActaDiferenciaRow As tbl_ActaDiferenciaRow = CType(Me.NewRow,tbl_ActaDiferenciaRow)
            Dim columnValuesArray() As Object = New Object() {Folio, Fecha, TipoDiferencia, Diferencia, DiferenciaLetras, Cliente, Caja, Remision, FechaRemision, DiceContener, DiceContenerLetras, ImporteReal, ImporteRealLetras, Cajero, Supervisor, Comentarios, Comentarios_Valida, Id_Remision, Hora, Id_Servicio, Cubiculo}
            rowtbl_ActaDiferenciaRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtbl_ActaDiferenciaRow)
            Return rowtbl_ActaDiferenciaRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tbl_ActaDiferenciaDataTable = CType(MyBase.Clone,tbl_ActaDiferenciaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tbl_ActaDiferenciaDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFolio = MyBase.Columns("Folio")
            Me.columnFecha = MyBase.Columns("Fecha")
            Me.columnTipoDiferencia = MyBase.Columns("TipoDiferencia")
            Me.columnDiferencia = MyBase.Columns("Diferencia")
            Me.columnDiferenciaLetras = MyBase.Columns("DiferenciaLetras")
            Me.columnCliente = MyBase.Columns("Cliente")
            Me.columnCaja = MyBase.Columns("Caja")
            Me.columnRemision = MyBase.Columns("Remision")
            Me.columnFechaRemision = MyBase.Columns("FechaRemision")
            Me.columnDiceContener = MyBase.Columns("DiceContener")
            Me.columnDiceContenerLetras = MyBase.Columns("DiceContenerLetras")
            Me.columnImporteReal = MyBase.Columns("ImporteReal")
            Me.columnImporteRealLetras = MyBase.Columns("ImporteRealLetras")
            Me.columnCajero = MyBase.Columns("Cajero")
            Me.columnSupervisor = MyBase.Columns("Supervisor")
            Me.columnComentarios = MyBase.Columns("Comentarios")
            Me.columnComentarios_Valida = MyBase.Columns("Comentarios_Valida")
            Me.columnId_Remision = MyBase.Columns("Id_Remision")
            Me.columnHora = MyBase.Columns("Hora")
            Me.columnId_Servicio = MyBase.Columns("Id_Servicio")
            Me.columnCubiculo = MyBase.Columns("Cubiculo")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFolio = New Global.System.Data.DataColumn("Folio", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFolio)
            Me.columnFecha = New Global.System.Data.DataColumn("Fecha", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFecha)
            Me.columnTipoDiferencia = New Global.System.Data.DataColumn("TipoDiferencia", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipoDiferencia)
            Me.columnDiferencia = New Global.System.Data.DataColumn("Diferencia", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDiferencia)
            Me.columnDiferenciaLetras = New Global.System.Data.DataColumn("DiferenciaLetras", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDiferenciaLetras)
            Me.columnCliente = New Global.System.Data.DataColumn("Cliente", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCliente)
            Me.columnCaja = New Global.System.Data.DataColumn("Caja", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCaja)
            Me.columnRemision = New Global.System.Data.DataColumn("Remision", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRemision)
            Me.columnFechaRemision = New Global.System.Data.DataColumn("FechaRemision", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaRemision)
            Me.columnDiceContener = New Global.System.Data.DataColumn("DiceContener", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDiceContener)
            Me.columnDiceContenerLetras = New Global.System.Data.DataColumn("DiceContenerLetras", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDiceContenerLetras)
            Me.columnImporteReal = New Global.System.Data.DataColumn("ImporteReal", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnImporteReal)
            Me.columnImporteRealLetras = New Global.System.Data.DataColumn("ImporteRealLetras", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnImporteRealLetras)
            Me.columnCajero = New Global.System.Data.DataColumn("Cajero", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCajero)
            Me.columnSupervisor = New Global.System.Data.DataColumn("Supervisor", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSupervisor)
            Me.columnComentarios = New Global.System.Data.DataColumn("Comentarios", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnComentarios)
            Me.columnComentarios_Valida = New Global.System.Data.DataColumn("Comentarios_Valida", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnComentarios_Valida)
            Me.columnId_Remision = New Global.System.Data.DataColumn("Id_Remision", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnId_Remision)
            Me.columnHora = New Global.System.Data.DataColumn("Hora", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHora)
            Me.columnId_Servicio = New Global.System.Data.DataColumn("Id_Servicio", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnId_Servicio)
            Me.columnCubiculo = New Global.System.Data.DataColumn("Cubiculo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCubiculo)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newtbl_ActaDiferenciaRow() As tbl_ActaDiferenciaRow
            Return CType(Me.NewRow,tbl_ActaDiferenciaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tbl_ActaDiferenciaRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tbl_ActaDiferenciaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tbl_ActaDiferenciaRowChangedEvent) Is Nothing) Then
                RaiseEvent tbl_ActaDiferenciaRowChanged(Me, New tbl_ActaDiferenciaRowChangeEvent(CType(e.Row,tbl_ActaDiferenciaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tbl_ActaDiferenciaRowChangingEvent) Is Nothing) Then
                RaiseEvent tbl_ActaDiferenciaRowChanging(Me, New tbl_ActaDiferenciaRowChangeEvent(CType(e.Row,tbl_ActaDiferenciaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tbl_ActaDiferenciaRowDeletedEvent) Is Nothing) Then
                RaiseEvent tbl_ActaDiferenciaRowDeleted(Me, New tbl_ActaDiferenciaRowChangeEvent(CType(e.Row,tbl_ActaDiferenciaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tbl_ActaDiferenciaRowDeletingEvent) Is Nothing) Then
                RaiseEvent tbl_ActaDiferenciaRowDeleting(Me, New tbl_ActaDiferenciaRowChangeEvent(CType(e.Row,tbl_ActaDiferenciaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removetbl_ActaDiferenciaRow(ByVal row As tbl_ActaDiferenciaRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ds_Reportes = New ds_Reportes
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tbl_ActaDiferenciaDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tbl_EnvasesActaDataTable
        Inherits Global.System.Data.TypedTableBase(Of tbl_EnvasesActaRow)
        
        Private columnNumero As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tbl_EnvasesActa"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumeroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumero
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tbl_EnvasesActaRow
            Get
                Return CType(Me.Rows(index),tbl_EnvasesActaRow)
            End Get
        End Property
        
        Public Event tbl_EnvasesActaRowChanging As tbl_EnvasesActaRowChangeEventHandler
        
        Public Event tbl_EnvasesActaRowChanged As tbl_EnvasesActaRowChangeEventHandler
        
        Public Event tbl_EnvasesActaRowDeleting As tbl_EnvasesActaRowChangeEventHandler
        
        Public Event tbl_EnvasesActaRowDeleted As tbl_EnvasesActaRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addtbl_EnvasesActaRow(ByVal row As tbl_EnvasesActaRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addtbl_EnvasesActaRow(ByVal Numero As String) As tbl_EnvasesActaRow
            Dim rowtbl_EnvasesActaRow As tbl_EnvasesActaRow = CType(Me.NewRow,tbl_EnvasesActaRow)
            Dim columnValuesArray() As Object = New Object() {Numero}
            rowtbl_EnvasesActaRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtbl_EnvasesActaRow)
            Return rowtbl_EnvasesActaRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tbl_EnvasesActaDataTable = CType(MyBase.Clone,tbl_EnvasesActaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tbl_EnvasesActaDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnNumero = MyBase.Columns("Numero")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnNumero = New Global.System.Data.DataColumn("Numero", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumero)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newtbl_EnvasesActaRow() As tbl_EnvasesActaRow
            Return CType(Me.NewRow,tbl_EnvasesActaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tbl_EnvasesActaRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tbl_EnvasesActaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tbl_EnvasesActaRowChangedEvent) Is Nothing) Then
                RaiseEvent tbl_EnvasesActaRowChanged(Me, New tbl_EnvasesActaRowChangeEvent(CType(e.Row,tbl_EnvasesActaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tbl_EnvasesActaRowChangingEvent) Is Nothing) Then
                RaiseEvent tbl_EnvasesActaRowChanging(Me, New tbl_EnvasesActaRowChangeEvent(CType(e.Row,tbl_EnvasesActaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tbl_EnvasesActaRowDeletedEvent) Is Nothing) Then
                RaiseEvent tbl_EnvasesActaRowDeleted(Me, New tbl_EnvasesActaRowChangeEvent(CType(e.Row,tbl_EnvasesActaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tbl_EnvasesActaRowDeletingEvent) Is Nothing) Then
                RaiseEvent tbl_EnvasesActaRowDeleting(Me, New tbl_EnvasesActaRowChangeEvent(CType(e.Row,tbl_EnvasesActaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removetbl_EnvasesActaRow(ByVal row As tbl_EnvasesActaRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ds_Reportes = New ds_Reportes
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tbl_EnvasesActaDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Tbl_DesgloseActasDataTable
        Inherits Global.System.Data.TypedTableBase(Of Tbl_DesgloseActasRow)
        
        Private columnMoneda As Global.System.Data.DataColumn
        
        Private columnDice_Ficha As Global.System.Data.DataColumn
        
        Private columnReal_Ficha As Global.System.Data.DataColumn
        
        Private columnDice_Doc As Global.System.Data.DataColumn
        
        Private columnReal_Doc As Global.System.Data.DataColumn
        
        Private columnRem_Efvo As Global.System.Data.DataColumn
        
        Private columnRem_Doc As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Tbl_DesgloseActas"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Dice_FichaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDice_Ficha
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Real_FichaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReal_Ficha
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Dice_DocColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDice_Doc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Real_DocColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReal_Doc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Rem_EfvoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRem_Efvo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Rem_DocColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRem_Doc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Tbl_DesgloseActasRow
            Get
                Return CType(Me.Rows(index),Tbl_DesgloseActasRow)
            End Get
        End Property
        
        Public Event Tbl_DesgloseActasRowChanging As Tbl_DesgloseActasRowChangeEventHandler
        
        Public Event Tbl_DesgloseActasRowChanged As Tbl_DesgloseActasRowChangeEventHandler
        
        Public Event Tbl_DesgloseActasRowDeleting As Tbl_DesgloseActasRowChangeEventHandler
        
        Public Event Tbl_DesgloseActasRowDeleted As Tbl_DesgloseActasRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTbl_DesgloseActasRow(ByVal row As Tbl_DesgloseActasRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTbl_DesgloseActasRow(ByVal Moneda As String, ByVal Dice_Ficha As String, ByVal Real_Ficha As String, ByVal Dice_Doc As String, ByVal Real_Doc As String, ByVal Rem_Efvo As String, ByVal Rem_Doc As String) As Tbl_DesgloseActasRow
            Dim rowTbl_DesgloseActasRow As Tbl_DesgloseActasRow = CType(Me.NewRow,Tbl_DesgloseActasRow)
            Dim columnValuesArray() As Object = New Object() {Moneda, Dice_Ficha, Real_Ficha, Dice_Doc, Real_Doc, Rem_Efvo, Rem_Doc}
            rowTbl_DesgloseActasRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTbl_DesgloseActasRow)
            Return rowTbl_DesgloseActasRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Tbl_DesgloseActasDataTable = CType(MyBase.Clone,Tbl_DesgloseActasDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Tbl_DesgloseActasDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnMoneda = MyBase.Columns("Moneda")
            Me.columnDice_Ficha = MyBase.Columns("Dice_Ficha")
            Me.columnReal_Ficha = MyBase.Columns("Real_Ficha")
            Me.columnDice_Doc = MyBase.Columns("Dice_Doc")
            Me.columnReal_Doc = MyBase.Columns("Real_Doc")
            Me.columnRem_Efvo = MyBase.Columns("Rem_Efvo")
            Me.columnRem_Doc = MyBase.Columns("Rem_Doc")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnMoneda = New Global.System.Data.DataColumn("Moneda", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMoneda)
            Me.columnDice_Ficha = New Global.System.Data.DataColumn("Dice_Ficha", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDice_Ficha)
            Me.columnReal_Ficha = New Global.System.Data.DataColumn("Real_Ficha", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReal_Ficha)
            Me.columnDice_Doc = New Global.System.Data.DataColumn("Dice_Doc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDice_Doc)
            Me.columnReal_Doc = New Global.System.Data.DataColumn("Real_Doc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReal_Doc)
            Me.columnRem_Efvo = New Global.System.Data.DataColumn("Rem_Efvo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRem_Efvo)
            Me.columnRem_Doc = New Global.System.Data.DataColumn("Rem_Doc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRem_Doc)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTbl_DesgloseActasRow() As Tbl_DesgloseActasRow
            Return CType(Me.NewRow,Tbl_DesgloseActasRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Tbl_DesgloseActasRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Tbl_DesgloseActasRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Tbl_DesgloseActasRowChangedEvent) Is Nothing) Then
                RaiseEvent Tbl_DesgloseActasRowChanged(Me, New Tbl_DesgloseActasRowChangeEvent(CType(e.Row,Tbl_DesgloseActasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Tbl_DesgloseActasRowChangingEvent) Is Nothing) Then
                RaiseEvent Tbl_DesgloseActasRowChanging(Me, New Tbl_DesgloseActasRowChangeEvent(CType(e.Row,Tbl_DesgloseActasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Tbl_DesgloseActasRowDeletedEvent) Is Nothing) Then
                RaiseEvent Tbl_DesgloseActasRowDeleted(Me, New Tbl_DesgloseActasRowChangeEvent(CType(e.Row,Tbl_DesgloseActasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Tbl_DesgloseActasRowDeletingEvent) Is Nothing) Then
                RaiseEvent Tbl_DesgloseActasRowDeleting(Me, New Tbl_DesgloseActasRowChangeEvent(CType(e.Row,Tbl_DesgloseActasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTbl_DesgloseActasRow(ByVal row As Tbl_DesgloseActasRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ds_Reportes = New ds_Reportes
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Tbl_DesgloseActasDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Tbl_FichasFalsosDataTable
        Inherits Global.System.Data.TypedTableBase(Of Tbl_FichasFalsosRow)
        
        Private columnId_Ficha As Global.System.Data.DataColumn
        
        Private columnDenominacionBanco As Global.System.Data.DataColumn
        
        Private columnCantidadFalsos As Global.System.Data.DataColumn
        
        Private columnImporteFalso As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Tbl_FichasFalsos"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Id_FichaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnId_Ficha
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DenominacionBancoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDenominacionBanco
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CantidadFalsosColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCantidadFalsos
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ImporteFalsoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnImporteFalso
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Tbl_FichasFalsosRow
            Get
                Return CType(Me.Rows(index),Tbl_FichasFalsosRow)
            End Get
        End Property
        
        Public Event Tbl_FichasFalsosRowChanging As Tbl_FichasFalsosRowChangeEventHandler
        
        Public Event Tbl_FichasFalsosRowChanged As Tbl_FichasFalsosRowChangeEventHandler
        
        Public Event Tbl_FichasFalsosRowDeleting As Tbl_FichasFalsosRowChangeEventHandler
        
        Public Event Tbl_FichasFalsosRowDeleted As Tbl_FichasFalsosRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTbl_FichasFalsosRow(ByVal row As Tbl_FichasFalsosRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTbl_FichasFalsosRow(ByVal Id_Ficha As String, ByVal DenominacionBanco As String, ByVal CantidadFalsos As String, ByVal ImporteFalso As Decimal) As Tbl_FichasFalsosRow
            Dim rowTbl_FichasFalsosRow As Tbl_FichasFalsosRow = CType(Me.NewRow,Tbl_FichasFalsosRow)
            Dim columnValuesArray() As Object = New Object() {Id_Ficha, DenominacionBanco, CantidadFalsos, ImporteFalso}
            rowTbl_FichasFalsosRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTbl_FichasFalsosRow)
            Return rowTbl_FichasFalsosRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Tbl_FichasFalsosDataTable = CType(MyBase.Clone,Tbl_FichasFalsosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Tbl_FichasFalsosDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnId_Ficha = MyBase.Columns("Id_Ficha")
            Me.columnDenominacionBanco = MyBase.Columns("DenominacionBanco")
            Me.columnCantidadFalsos = MyBase.Columns("CantidadFalsos")
            Me.columnImporteFalso = MyBase.Columns("ImporteFalso")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnId_Ficha = New Global.System.Data.DataColumn("Id_Ficha", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnId_Ficha)
            Me.columnDenominacionBanco = New Global.System.Data.DataColumn("DenominacionBanco", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDenominacionBanco)
            Me.columnCantidadFalsos = New Global.System.Data.DataColumn("CantidadFalsos", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCantidadFalsos)
            Me.columnImporteFalso = New Global.System.Data.DataColumn("ImporteFalso", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnImporteFalso)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTbl_FichasFalsosRow() As Tbl_FichasFalsosRow
            Return CType(Me.NewRow,Tbl_FichasFalsosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Tbl_FichasFalsosRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Tbl_FichasFalsosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Tbl_FichasFalsosRowChangedEvent) Is Nothing) Then
                RaiseEvent Tbl_FichasFalsosRowChanged(Me, New Tbl_FichasFalsosRowChangeEvent(CType(e.Row,Tbl_FichasFalsosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Tbl_FichasFalsosRowChangingEvent) Is Nothing) Then
                RaiseEvent Tbl_FichasFalsosRowChanging(Me, New Tbl_FichasFalsosRowChangeEvent(CType(e.Row,Tbl_FichasFalsosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Tbl_FichasFalsosRowDeletedEvent) Is Nothing) Then
                RaiseEvent Tbl_FichasFalsosRowDeleted(Me, New Tbl_FichasFalsosRowChangeEvent(CType(e.Row,Tbl_FichasFalsosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Tbl_FichasFalsosRowDeletingEvent) Is Nothing) Then
                RaiseEvent Tbl_FichasFalsosRowDeleting(Me, New Tbl_FichasFalsosRowChangeEvent(CType(e.Row,Tbl_FichasFalsosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTbl_FichasFalsosRow(ByVal row As Tbl_FichasFalsosRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ds_Reportes = New ds_Reportes
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Tbl_FichasFalsosDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Tbl_DatosEmpresaDataTable
        Inherits Global.System.Data.TypedTableBase(Of Tbl_DatosEmpresaRow)
        
        Private columnNombre As Global.System.Data.DataColumn
        
        Private columnDireccion As Global.System.Data.DataColumn
        
        Private columnCiudad As Global.System.Data.DataColumn
        
        Private columnEstado As Global.System.Data.DataColumn
        
        Private columnEmpresa As Global.System.Data.DataColumn
        
        Private columnLogo As Global.System.Data.DataColumn
        
        Private columnRFC As Global.System.Data.DataColumn
        
        Private columnRegPatronal As Global.System.Data.DataColumn
        
        Private columnGiro As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Tbl_DatosEmpresa"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DireccionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDireccion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CiudadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCiudad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EstadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEstado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EmpresaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmpresa
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LogoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLogo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RFCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRFC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RegPatronalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRegPatronal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GiroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGiro
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Tbl_DatosEmpresaRow
            Get
                Return CType(Me.Rows(index),Tbl_DatosEmpresaRow)
            End Get
        End Property
        
        Public Event Tbl_DatosEmpresaRowChanging As Tbl_DatosEmpresaRowChangeEventHandler
        
        Public Event Tbl_DatosEmpresaRowChanged As Tbl_DatosEmpresaRowChangeEventHandler
        
        Public Event Tbl_DatosEmpresaRowDeleting As Tbl_DatosEmpresaRowChangeEventHandler
        
        Public Event Tbl_DatosEmpresaRowDeleted As Tbl_DatosEmpresaRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTbl_DatosEmpresaRow(ByVal row As Tbl_DatosEmpresaRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTbl_DatosEmpresaRow(ByVal Nombre As String, ByVal Direccion As String, ByVal Ciudad As String, ByVal Estado As String, ByVal Empresa As String, ByVal Logo() As Byte, ByVal RFC As String, ByVal RegPatronal As String, ByVal Giro As String) As Tbl_DatosEmpresaRow
            Dim rowTbl_DatosEmpresaRow As Tbl_DatosEmpresaRow = CType(Me.NewRow,Tbl_DatosEmpresaRow)
            Dim columnValuesArray() As Object = New Object() {Nombre, Direccion, Ciudad, Estado, Empresa, Logo, RFC, RegPatronal, Giro}
            rowTbl_DatosEmpresaRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTbl_DatosEmpresaRow)
            Return rowTbl_DatosEmpresaRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Tbl_DatosEmpresaDataTable = CType(MyBase.Clone,Tbl_DatosEmpresaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Tbl_DatosEmpresaDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnNombre = MyBase.Columns("Nombre")
            Me.columnDireccion = MyBase.Columns("Direccion")
            Me.columnCiudad = MyBase.Columns("Ciudad")
            Me.columnEstado = MyBase.Columns("Estado")
            Me.columnEmpresa = MyBase.Columns("Empresa")
            Me.columnLogo = MyBase.Columns("Logo")
            Me.columnRFC = MyBase.Columns("RFC")
            Me.columnRegPatronal = MyBase.Columns("RegPatronal")
            Me.columnGiro = MyBase.Columns("Giro")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnNombre = New Global.System.Data.DataColumn("Nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombre)
            Me.columnDireccion = New Global.System.Data.DataColumn("Direccion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDireccion)
            Me.columnCiudad = New Global.System.Data.DataColumn("Ciudad", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCiudad)
            Me.columnEstado = New Global.System.Data.DataColumn("Estado", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEstado)
            Me.columnEmpresa = New Global.System.Data.DataColumn("Empresa", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmpresa)
            Me.columnLogo = New Global.System.Data.DataColumn("Logo", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLogo)
            Me.columnRFC = New Global.System.Data.DataColumn("RFC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRFC)
            Me.columnRegPatronal = New Global.System.Data.DataColumn("RegPatronal", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRegPatronal)
            Me.columnGiro = New Global.System.Data.DataColumn("Giro", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGiro)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTbl_DatosEmpresaRow() As Tbl_DatosEmpresaRow
            Return CType(Me.NewRow,Tbl_DatosEmpresaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Tbl_DatosEmpresaRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Tbl_DatosEmpresaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Tbl_DatosEmpresaRowChangedEvent) Is Nothing) Then
                RaiseEvent Tbl_DatosEmpresaRowChanged(Me, New Tbl_DatosEmpresaRowChangeEvent(CType(e.Row,Tbl_DatosEmpresaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Tbl_DatosEmpresaRowChangingEvent) Is Nothing) Then
                RaiseEvent Tbl_DatosEmpresaRowChanging(Me, New Tbl_DatosEmpresaRowChangeEvent(CType(e.Row,Tbl_DatosEmpresaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Tbl_DatosEmpresaRowDeletedEvent) Is Nothing) Then
                RaiseEvent Tbl_DatosEmpresaRowDeleted(Me, New Tbl_DatosEmpresaRowChangeEvent(CType(e.Row,Tbl_DatosEmpresaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Tbl_DatosEmpresaRowDeletingEvent) Is Nothing) Then
                RaiseEvent Tbl_DatosEmpresaRowDeleting(Me, New Tbl_DatosEmpresaRowChangeEvent(CType(e.Row,Tbl_DatosEmpresaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTbl_DatosEmpresaRow(ByVal row As Tbl_DatosEmpresaRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ds_Reportes = New ds_Reportes
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Tbl_DatosEmpresaDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Tbl_RecuentoDesgloseDataTable
        Inherits Global.System.Data.TypedTableBase(Of Tbl_RecuentoDesgloseRow)
        
        Private columnMoneda As Global.System.Data.DataColumn
        
        Private columnDenominacion As Global.System.Data.DataColumn
        
        Private columnCantidad As Global.System.Data.DataColumn
        
        Private columnImporte As Global.System.Data.DataColumn
        
        Private columnNombre_Comercial As Global.System.Data.DataColumn
        
        Private columnEfectivo As Global.System.Data.DataColumn
        
        Private columnDespensa As Global.System.Data.DataColumn
        
        Private columnLoteria As Global.System.Data.DataColumn
        
        Private columnMorralla As Global.System.Data.DataColumn
        
        Private columnOtros As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Tbl_RecuentoDesglose"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DenominacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDenominacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CantidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCantidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ImporteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnImporte
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Nombre_ComercialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombre_Comercial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EfectivoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEfectivo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DespensaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDespensa
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LoteriaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLoteria
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MorrallaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMorralla
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OtrosColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOtros
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Tbl_RecuentoDesgloseRow
            Get
                Return CType(Me.Rows(index),Tbl_RecuentoDesgloseRow)
            End Get
        End Property
        
        Public Event Tbl_RecuentoDesgloseRowChanging As Tbl_RecuentoDesgloseRowChangeEventHandler
        
        Public Event Tbl_RecuentoDesgloseRowChanged As Tbl_RecuentoDesgloseRowChangeEventHandler
        
        Public Event Tbl_RecuentoDesgloseRowDeleting As Tbl_RecuentoDesgloseRowChangeEventHandler
        
        Public Event Tbl_RecuentoDesgloseRowDeleted As Tbl_RecuentoDesgloseRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTbl_RecuentoDesgloseRow(ByVal row As Tbl_RecuentoDesgloseRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTbl_RecuentoDesgloseRow(ByVal Moneda As String, ByVal Denominacion As String, ByVal Cantidad As String, ByVal Importe As String, ByVal Nombre_Comercial As String, ByVal Efectivo As String, ByVal Despensa As String, ByVal Loteria As String, ByVal Morralla As String, ByVal Otros As String) As Tbl_RecuentoDesgloseRow
            Dim rowTbl_RecuentoDesgloseRow As Tbl_RecuentoDesgloseRow = CType(Me.NewRow,Tbl_RecuentoDesgloseRow)
            Dim columnValuesArray() As Object = New Object() {Moneda, Denominacion, Cantidad, Importe, Nombre_Comercial, Efectivo, Despensa, Loteria, Morralla, Otros}
            rowTbl_RecuentoDesgloseRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTbl_RecuentoDesgloseRow)
            Return rowTbl_RecuentoDesgloseRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Tbl_RecuentoDesgloseDataTable = CType(MyBase.Clone,Tbl_RecuentoDesgloseDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Tbl_RecuentoDesgloseDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnMoneda = MyBase.Columns("Moneda")
            Me.columnDenominacion = MyBase.Columns("Denominacion")
            Me.columnCantidad = MyBase.Columns("Cantidad")
            Me.columnImporte = MyBase.Columns("Importe")
            Me.columnNombre_Comercial = MyBase.Columns("Nombre_Comercial")
            Me.columnEfectivo = MyBase.Columns("Efectivo")
            Me.columnDespensa = MyBase.Columns("Despensa")
            Me.columnLoteria = MyBase.Columns("Loteria")
            Me.columnMorralla = MyBase.Columns("Morralla")
            Me.columnOtros = MyBase.Columns("Otros")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnMoneda = New Global.System.Data.DataColumn("Moneda", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMoneda)
            Me.columnDenominacion = New Global.System.Data.DataColumn("Denominacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDenominacion)
            Me.columnCantidad = New Global.System.Data.DataColumn("Cantidad", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCantidad)
            Me.columnImporte = New Global.System.Data.DataColumn("Importe", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnImporte)
            Me.columnNombre_Comercial = New Global.System.Data.DataColumn("Nombre_Comercial", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombre_Comercial)
            Me.columnEfectivo = New Global.System.Data.DataColumn("Efectivo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEfectivo)
            Me.columnDespensa = New Global.System.Data.DataColumn("Despensa", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDespensa)
            Me.columnLoteria = New Global.System.Data.DataColumn("Loteria", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLoteria)
            Me.columnMorralla = New Global.System.Data.DataColumn("Morralla", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMorralla)
            Me.columnOtros = New Global.System.Data.DataColumn("Otros", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOtros)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTbl_RecuentoDesgloseRow() As Tbl_RecuentoDesgloseRow
            Return CType(Me.NewRow,Tbl_RecuentoDesgloseRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Tbl_RecuentoDesgloseRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Tbl_RecuentoDesgloseRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Tbl_RecuentoDesgloseRowChangedEvent) Is Nothing) Then
                RaiseEvent Tbl_RecuentoDesgloseRowChanged(Me, New Tbl_RecuentoDesgloseRowChangeEvent(CType(e.Row,Tbl_RecuentoDesgloseRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Tbl_RecuentoDesgloseRowChangingEvent) Is Nothing) Then
                RaiseEvent Tbl_RecuentoDesgloseRowChanging(Me, New Tbl_RecuentoDesgloseRowChangeEvent(CType(e.Row,Tbl_RecuentoDesgloseRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Tbl_RecuentoDesgloseRowDeletedEvent) Is Nothing) Then
                RaiseEvent Tbl_RecuentoDesgloseRowDeleted(Me, New Tbl_RecuentoDesgloseRowChangeEvent(CType(e.Row,Tbl_RecuentoDesgloseRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Tbl_RecuentoDesgloseRowDeletingEvent) Is Nothing) Then
                RaiseEvent Tbl_RecuentoDesgloseRowDeleting(Me, New Tbl_RecuentoDesgloseRowChangeEvent(CType(e.Row,Tbl_RecuentoDesgloseRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTbl_RecuentoDesgloseRow(ByVal row As Tbl_RecuentoDesgloseRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ds_Reportes = New ds_Reportes
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Tbl_RecuentoDesgloseDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Tbl_HojaTrabajoRow
        Inherits Global.System.Data.DataRow
        
        Private tableTbl_HojaTrabajo As Tbl_HojaTrabajoDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTbl_HojaTrabajo = CType(Me.Table,Tbl_HojaTrabajoDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Verificador() As String
            Get
                Return CType(Me(Me.tableTbl_HojaTrabajo.VerificadorColumn),String)
            End Get
            Set
                Me(Me.tableTbl_HojaTrabajo.VerificadorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cliente() As String
            Get
                Return CType(Me(Me.tableTbl_HojaTrabajo.ClienteColumn),String)
            End Get
            Set
                Me(Me.tableTbl_HojaTrabajo.ClienteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cte_TV() As String
            Get
                Return CType(Me(Me.tableTbl_HojaTrabajo.Cte_TVColumn),String)
            End Get
            Set
                Me(Me.tableTbl_HojaTrabajo.Cte_TVColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Remision() As Decimal
            Get
                Return CType(Me(Me.tableTbl_HojaTrabajo.RemisionColumn),Decimal)
            End Get
            Set
                Me(Me.tableTbl_HojaTrabajo.RemisionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ficha() As Decimal
            Get
                Return CType(Me(Me.tableTbl_HojaTrabajo.FichaColumn),Decimal)
            End Get
            Set
                Me(Me.tableTbl_HojaTrabajo.FichaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Efectivo() As Decimal
            Get
                Return CType(Me(Me.tableTbl_HojaTrabajo.EfectivoColumn),Decimal)
            End Get
            Set
                Me(Me.tableTbl_HojaTrabajo.EfectivoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cheques() As Decimal
            Get
                Return CType(Me(Me.tableTbl_HojaTrabajo.ChequesColumn),Decimal)
            End Get
            Set
                Me(Me.tableTbl_HojaTrabajo.ChequesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Otros() As Decimal
            Get
                Return CType(Me(Me.tableTbl_HojaTrabajo.OtrosColumn),Decimal)
            End Get
            Set
                Me(Me.tableTbl_HojaTrabajo.OtrosColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property D_Efectivo() As Decimal
            Get
                Return CType(Me(Me.tableTbl_HojaTrabajo.D_EfectivoColumn),Decimal)
            End Get
            Set
                Me(Me.tableTbl_HojaTrabajo.D_EfectivoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property D_Cheques() As Decimal
            Get
                Return CType(Me(Me.tableTbl_HojaTrabajo.D_ChequesColumn),Decimal)
            End Get
            Set
                Me(Me.tableTbl_HojaTrabajo.D_ChequesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property D_Doctos() As Decimal
            Get
                Return CType(Me(Me.tableTbl_HojaTrabajo.D_DoctosColumn),Decimal)
            End Get
            Set
                Me(Me.tableTbl_HojaTrabajo.D_DoctosColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Tbl_DenominacionRow
        Inherits Global.System.Data.DataRow
        
        Private tableTbl_Denominacion As Tbl_DenominacionDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTbl_Denominacion = CType(Me.Table,Tbl_DenominacionDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Denominacion() As Decimal
            Get
                Return CType(Me(Me.tableTbl_Denominacion.DenominacionColumn),Decimal)
            End Get
            Set
                Me(Me.tableTbl_Denominacion.DenominacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cantidad() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTbl_Denominacion.CantidadColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Cantidad' de la tabla 'Tbl_Denominacion' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbl_Denominacion.CantidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Importe() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTbl_Denominacion.ImporteColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Importe' de la tabla 'Tbl_Denominacion' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbl_Denominacion.ImporteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCantidadNull() As Boolean
            Return Me.IsNull(Me.tableTbl_Denominacion.CantidadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCantidadNull()
            Me(Me.tableTbl_Denominacion.CantidadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsImporteNull() As Boolean
            Return Me.IsNull(Me.tableTbl_Denominacion.ImporteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetImporteNull()
            Me(Me.tableTbl_Denominacion.ImporteColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Cat_SucursalesRow
        Inherits Global.System.Data.DataRow
        
        Private tableCat_Sucursales As Cat_SucursalesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCat_Sucursales = CType(Me.Table,Cat_SucursalesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Id_Sucursal() As Decimal
            Get
                Return CType(Me(Me.tableCat_Sucursales.Id_SucursalColumn),Decimal)
            End Get
            Set
                Me(Me.tableCat_Sucursales.Id_SucursalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Id_Empresa() As Decimal
            Get
                Return CType(Me(Me.tableCat_Sucursales.Id_EmpresaColumn),Decimal)
            End Get
            Set
                Me(Me.tableCat_Sucursales.Id_EmpresaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Clave_Sucursal() As String
            Get
                Return CType(Me(Me.tableCat_Sucursales.Clave_SucursalColumn),String)
            End Get
            Set
                Me(Me.tableCat_Sucursales.Clave_SucursalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nombre() As String
            Get
                Return CType(Me(Me.tableCat_Sucursales.NombreColumn),String)
            End Get
            Set
                Me(Me.tableCat_Sucursales.NombreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Direccion() As String
            Get
                Return CType(Me(Me.tableCat_Sucursales.DireccionColumn),String)
            End Get
            Set
                Me(Me.tableCat_Sucursales.DireccionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Id_Ciudad() As Decimal
            Get
                Return CType(Me(Me.tableCat_Sucursales.Id_CiudadColumn),Decimal)
            End Get
            Set
                Me(Me.tableCat_Sucursales.Id_CiudadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Usuario_Gerente() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCat_Sucursales.Usuario_GerenteColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Usuario_Gerente' de la tabla 'Cat_Sucursales' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCat_Sucursales.Usuario_GerenteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Linea_Rproceso() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCat_Sucursales.Linea_RprocesoColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Linea_Rproceso' de la tabla 'Cat_Sucursales' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCat_Sucursales.Linea_RprocesoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Linea_Rruta() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCat_Sucursales.Linea_RrutaColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Linea_Rruta' de la tabla 'Cat_Sucursales' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCat_Sucursales.Linea_RrutaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pro_ManipulaMorralla() As String
            Get
                Try 
                    Return CType(Me(Me.tableCat_Sucursales.Pro_ManipulaMorrallaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Pro_ManipulaMorralla' de la tabla 'Cat_Sucursales' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCat_Sucursales.Pro_ManipulaMorrallaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Clasifica_Verificador() As String
            Get
                Try 
                    Return CType(Me(Me.tableCat_Sucursales.Clasifica_VerificadorColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Clasifica_Verificador' de la tabla 'Cat_Sucursales' es DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableCat_Sucursales.Clasifica_VerificadorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cliente_Banxico() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCat_Sucursales.Cliente_BanxicoColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Cliente_Banxico' de la tabla 'Cat_Sucursales' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCat_Sucursales.Cliente_BanxicoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Moneda_Local() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCat_Sucursales.Moneda_LocalColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Moneda_Local' de la tabla 'Cat_Sucursales' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCat_Sucursales.Moneda_LocalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ult_Cliente() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCat_Sucursales.Ult_ClienteColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Ult_Cliente' de la tabla 'Cat_Sucursales' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCat_Sucursales.Ult_ClienteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ult_Prospecto() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCat_Sucursales.Ult_ProspectoColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Ult_Prospecto' de la tabla 'Cat_Sucursales' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCat_Sucursales.Ult_ProspectoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ult_Acta() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCat_Sucursales.Ult_ActaColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Ult_Acta' de la tabla 'Cat_Sucursales' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCat_Sucursales.Ult_ActaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Timer_Monitoreo() As Byte
            Get
                Try 
                    Return CType(Me(Me.tableCat_Sucursales.Timer_MonitoreoColumn),Byte)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Timer_Monitoreo' de la tabla 'Cat_Sucursales' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCat_Sucursales.Timer_MonitoreoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Logo() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableCat_Sucursales.LogoColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Logo' de la tabla 'Cat_Sucursales' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCat_Sucursales.LogoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Status() As String
            Get
                Return CType(Me(Me.tableCat_Sucursales.StatusColumn),String)
            End Get
            Set
                Me(Me.tableCat_Sucursales.StatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUsuario_GerenteNull() As Boolean
            Return Me.IsNull(Me.tableCat_Sucursales.Usuario_GerenteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUsuario_GerenteNull()
            Me(Me.tableCat_Sucursales.Usuario_GerenteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLinea_RprocesoNull() As Boolean
            Return Me.IsNull(Me.tableCat_Sucursales.Linea_RprocesoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLinea_RprocesoNull()
            Me(Me.tableCat_Sucursales.Linea_RprocesoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLinea_RrutaNull() As Boolean
            Return Me.IsNull(Me.tableCat_Sucursales.Linea_RrutaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLinea_RrutaNull()
            Me(Me.tableCat_Sucursales.Linea_RrutaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPro_ManipulaMorrallaNull() As Boolean
            Return Me.IsNull(Me.tableCat_Sucursales.Pro_ManipulaMorrallaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPro_ManipulaMorrallaNull()
            Me(Me.tableCat_Sucursales.Pro_ManipulaMorrallaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsClasifica_VerificadorNull() As Boolean
            Return Me.IsNull(Me.tableCat_Sucursales.Clasifica_VerificadorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetClasifica_VerificadorNull()
            Me(Me.tableCat_Sucursales.Clasifica_VerificadorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCliente_BanxicoNull() As Boolean
            Return Me.IsNull(Me.tableCat_Sucursales.Cliente_BanxicoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCliente_BanxicoNull()
            Me(Me.tableCat_Sucursales.Cliente_BanxicoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMoneda_LocalNull() As Boolean
            Return Me.IsNull(Me.tableCat_Sucursales.Moneda_LocalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMoneda_LocalNull()
            Me(Me.tableCat_Sucursales.Moneda_LocalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUlt_ClienteNull() As Boolean
            Return Me.IsNull(Me.tableCat_Sucursales.Ult_ClienteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUlt_ClienteNull()
            Me(Me.tableCat_Sucursales.Ult_ClienteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUlt_ProspectoNull() As Boolean
            Return Me.IsNull(Me.tableCat_Sucursales.Ult_ProspectoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUlt_ProspectoNull()
            Me(Me.tableCat_Sucursales.Ult_ProspectoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUlt_ActaNull() As Boolean
            Return Me.IsNull(Me.tableCat_Sucursales.Ult_ActaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUlt_ActaNull()
            Me(Me.tableCat_Sucursales.Ult_ActaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTimer_MonitoreoNull() As Boolean
            Return Me.IsNull(Me.tableCat_Sucursales.Timer_MonitoreoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTimer_MonitoreoNull()
            Me(Me.tableCat_Sucursales.Timer_MonitoreoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLogoNull() As Boolean
            Return Me.IsNull(Me.tableCat_Sucursales.LogoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLogoNull()
            Me(Me.tableCat_Sucursales.LogoColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Tbl_FichasRow
        Inherits Global.System.Data.DataRow
        
        Private tableTbl_Fichas As Tbl_FichasDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTbl_Fichas = CType(Me.Table,Tbl_FichasDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Id_Ficha() As Decimal
            Get
                Return CType(Me(Me.tableTbl_Fichas.Id_FichaColumn),Decimal)
            End Get
            Set
                Me(Me.tableTbl_Fichas.Id_FichaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Id_Servicio() As Decimal
            Get
                Return CType(Me(Me.tableTbl_Fichas.Id_ServicioColumn),Decimal)
            End Get
            Set
                Me(Me.tableTbl_Fichas.Id_ServicioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Consecutivo() As Long
            Get
                Try 
                    Return CType(Me(Me.tableTbl_Fichas.ConsecutivoColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Consecutivo' de la tabla 'Tbl_Fichas' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbl_Fichas.ConsecutivoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cuenta() As String
            Get
                Try 
                    Return CType(Me(Me.tableTbl_Fichas.CuentaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Cuenta' de la tabla 'Tbl_Fichas' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbl_Fichas.CuentaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Remision() As Decimal
            Get
                Return CType(Me(Me.tableTbl_Fichas.RemisionColumn),Decimal)
            End Get
            Set
                Me(Me.tableTbl_Fichas.RemisionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Referencia() As String
            Get
                Try 
                    Return CType(Me(Me.tableTbl_Fichas.ReferenciaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Referencia' de la tabla 'Tbl_Fichas' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbl_Fichas.ReferenciaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Divisa() As String
            Get
                Try 
                    Return CType(Me(Me.tableTbl_Fichas.DivisaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Divisa' de la tabla 'Tbl_Fichas' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbl_Fichas.DivisaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IEfectivo() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTbl_Fichas.IEfectivoColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IEfectivo' de la tabla 'Tbl_Fichas' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbl_Fichas.IEfectivoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IChequesP() As Decimal
            Get
                Return CType(Me(Me.tableTbl_Fichas.IChequesPColumn),Decimal)
            End Get
            Set
                Me(Me.tableTbl_Fichas.IChequesPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IChequesO() As Decimal
            Get
                Return CType(Me(Me.tableTbl_Fichas.IChequesOColumn),Decimal)
            End Get
            Set
                Me(Me.tableTbl_Fichas.IChequesOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ITotal() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTbl_Fichas.ITotalColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ITotal' de la tabla 'Tbl_Fichas' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbl_Fichas.ITotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DTotal() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTbl_Fichas.DTotalColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DTotal' de la tabla 'Tbl_Fichas' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbl_Fichas.DTotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DEfectivo() As Decimal
            Get
                Return CType(Me(Me.tableTbl_Fichas.DEfectivoColumn),Decimal)
            End Get
            Set
                Me(Me.tableTbl_Fichas.DEfectivoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TipoD() As String
            Get
                Try 
                    Return CType(Me(Me.tableTbl_Fichas.TipoDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TipoD' de la tabla 'Tbl_Fichas' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbl_Fichas.TipoDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DiceContener() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTbl_Fichas.DiceContenerColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DiceContener' de la tabla 'Tbl_Fichas' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbl_Fichas.DiceContenerColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Convenio() As String
            Get
                If Me.IsConvenioNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableTbl_Fichas.ConvenioColumn),String)
                End If
            End Get
            Set
                Me(Me.tableTbl_Fichas.ConvenioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FolioFicha() As String
            Get
                If Me.IsFolioFichaNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableTbl_Fichas.FolioFichaColumn),String)
                End If
            End Get
            Set
                Me(Me.tableTbl_Fichas.FolioFichaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ContieneFalsos() As String
            Get
                If Me.IsContieneFalsosNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableTbl_Fichas.ContieneFalsosColumn),String)
                End If
            End Get
            Set
                Me(Me.tableTbl_Fichas.ContieneFalsosColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsConsecutivoNull() As Boolean
            Return Me.IsNull(Me.tableTbl_Fichas.ConsecutivoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetConsecutivoNull()
            Me(Me.tableTbl_Fichas.ConsecutivoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCuentaNull() As Boolean
            Return Me.IsNull(Me.tableTbl_Fichas.CuentaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCuentaNull()
            Me(Me.tableTbl_Fichas.CuentaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReferenciaNull() As Boolean
            Return Me.IsNull(Me.tableTbl_Fichas.ReferenciaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReferenciaNull()
            Me(Me.tableTbl_Fichas.ReferenciaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDivisaNull() As Boolean
            Return Me.IsNull(Me.tableTbl_Fichas.DivisaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDivisaNull()
            Me(Me.tableTbl_Fichas.DivisaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIEfectivoNull() As Boolean
            Return Me.IsNull(Me.tableTbl_Fichas.IEfectivoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIEfectivoNull()
            Me(Me.tableTbl_Fichas.IEfectivoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsITotalNull() As Boolean
            Return Me.IsNull(Me.tableTbl_Fichas.ITotalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetITotalNull()
            Me(Me.tableTbl_Fichas.ITotalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDTotalNull() As Boolean
            Return Me.IsNull(Me.tableTbl_Fichas.DTotalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDTotalNull()
            Me(Me.tableTbl_Fichas.DTotalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTipoDNull() As Boolean
            Return Me.IsNull(Me.tableTbl_Fichas.TipoDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTipoDNull()
            Me(Me.tableTbl_Fichas.TipoDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDiceContenerNull() As Boolean
            Return Me.IsNull(Me.tableTbl_Fichas.DiceContenerColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDiceContenerNull()
            Me(Me.tableTbl_Fichas.DiceContenerColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsConvenioNull() As Boolean
            Return Me.IsNull(Me.tableTbl_Fichas.ConvenioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetConvenioNull()
            Me(Me.tableTbl_Fichas.ConvenioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFolioFichaNull() As Boolean
            Return Me.IsNull(Me.tableTbl_Fichas.FolioFichaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFolioFichaNull()
            Me(Me.tableTbl_Fichas.FolioFichaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsContieneFalsosNull() As Boolean
            Return Me.IsNull(Me.tableTbl_Fichas.ContieneFalsosColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetContieneFalsosNull()
            Me(Me.tableTbl_Fichas.ContieneFalsosColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Tbl_ChequesRow
        Inherits Global.System.Data.DataRow
        
        Private tableTbl_Cheques As Tbl_ChequesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTbl_Cheques = CType(Me.Table,Tbl_ChequesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Id_Ficha() As Decimal
            Get
                Return CType(Me(Me.tableTbl_Cheques.Id_FichaColumn),Decimal)
            End Get
            Set
                Me(Me.tableTbl_Cheques.Id_FichaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MICR() As String
            Get
                Return CType(Me(Me.tableTbl_Cheques.MICRColumn),String)
            End Get
            Set
                Me(Me.tableTbl_Cheques.MICRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Importe() As Decimal
            Get
                Return CType(Me(Me.tableTbl_Cheques.ImporteColumn),Decimal)
            End Get
            Set
                Me(Me.tableTbl_Cheques.ImporteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Propio() As String
            Get
                Return CType(Me(Me.tableTbl_Cheques.PropioColumn),String)
            End Get
            Set
                Me(Me.tableTbl_Cheques.PropioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Numero_Valida() As String
            Get
                Return CType(Me(Me.tableTbl_Cheques.Numero_ValidaColumn),String)
            End Get
            Set
                Me(Me.tableTbl_Cheques.Numero_ValidaColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Tbl_FichasEfectivoRow
        Inherits Global.System.Data.DataRow
        
        Private tableTbl_FichasEfectivo As Tbl_FichasEfectivoDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTbl_FichasEfectivo = CType(Me.Table,Tbl_FichasEfectivoDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Id_Ficha() As Decimal
            Get
                Return CType(Me(Me.tableTbl_FichasEfectivo.Id_FichaColumn),Decimal)
            End Get
            Set
                Me(Me.tableTbl_FichasEfectivo.Id_FichaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Denominacion() As Decimal
            Get
                Return CType(Me(Me.tableTbl_FichasEfectivo.DenominacionColumn),Decimal)
            End Get
            Set
                Me(Me.tableTbl_FichasEfectivo.DenominacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cantidad() As Decimal
            Get
                Return CType(Me(Me.tableTbl_FichasEfectivo.CantidadColumn),Decimal)
            End Get
            Set
                Me(Me.tableTbl_FichasEfectivo.CantidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Importe() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTbl_FichasEfectivo.ImporteColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Importe' de la tabla 'Tbl_FichasEfectivo' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbl_FichasEfectivo.ImporteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Presentacion() As String
            Get
                Return CType(Me(Me.tableTbl_FichasEfectivo.PresentacionColumn),String)
            End Get
            Set
                Me(Me.tableTbl_FichasEfectivo.PresentacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Id_Denominacion() As Decimal
            Get
                Return CType(Me(Me.tableTbl_FichasEfectivo.Id_DenominacionColumn),Decimal)
            End Get
            Set
                Me(Me.tableTbl_FichasEfectivo.Id_DenominacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DenominacionBanco() As String
            Get
                If Me.IsDenominacionBancoNull Then
                    Return Nothing
                Else
                    Return CType(Me(Me.tableTbl_FichasEfectivo.DenominacionBancoColumn),String)
                End If
            End Get
            Set
                Me(Me.tableTbl_FichasEfectivo.DenominacionBancoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsImporteNull() As Boolean
            Return Me.IsNull(Me.tableTbl_FichasEfectivo.ImporteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetImporteNull()
            Me(Me.tableTbl_FichasEfectivo.ImporteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDenominacionBancoNull() As Boolean
            Return Me.IsNull(Me.tableTbl_FichasEfectivo.DenominacionBancoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDenominacionBancoNull()
            Me(Me.tableTbl_FichasEfectivo.DenominacionBancoColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Tbl_TabularRow
        Inherits Global.System.Data.DataRow
        
        Private tableTbl_Tabular As Tbl_TabularDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTbl_Tabular = CType(Me.Table,Tbl_TabularDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Numero_Remision() As Decimal
            Get
                Return CType(Me(Me.tableTbl_Tabular.Numero_RemisionColumn),Decimal)
            End Get
            Set
                Me(Me.tableTbl_Tabular.Numero_RemisionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Caja_Bancaria() As String
            Get
                Return CType(Me(Me.tableTbl_Tabular.Caja_BancariaColumn),String)
            End Get
            Set
                Me(Me.tableTbl_Tabular.Caja_BancariaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Moneda() As String
            Get
                Return CType(Me(Me.tableTbl_Tabular.MonedaColumn),String)
            End Get
            Set
                Me(Me.tableTbl_Tabular.MonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Presentacion() As String
            Get
                Return CType(Me(Me.tableTbl_Tabular.PresentacionColumn),String)
            End Get
            Set
                Me(Me.tableTbl_Tabular.PresentacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Id_Moneda() As Decimal
            Get
                Return CType(Me(Me.tableTbl_Tabular.Id_MonedaColumn),Decimal)
            End Get
            Set
                Me(Me.tableTbl_Tabular.Id_MonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Denominacion() As Decimal
            Get
                Return CType(Me(Me.tableTbl_Tabular.DenominacionColumn),Decimal)
            End Get
            Set
                Me(Me.tableTbl_Tabular.DenominacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cantidad() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTbl_Tabular.CantidadColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Cantidad' de la tabla 'Tbl_Tabular' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbl_Tabular.CantidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Importe() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTbl_Tabular.ImporteColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Importe' de la tabla 'Tbl_Tabular' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbl_Tabular.ImporteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCantidadNull() As Boolean
            Return Me.IsNull(Me.tableTbl_Tabular.CantidadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCantidadNull()
            Me(Me.tableTbl_Tabular.CantidadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsImporteNull() As Boolean
            Return Me.IsNull(Me.tableTbl_Tabular.ImporteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetImporteNull()
            Me(Me.tableTbl_Tabular.ImporteColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Tbl_TabularFichaRow
        Inherits Global.System.Data.DataRow
        
        Private tableTbl_TabularFicha As Tbl_TabularFichaDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTbl_TabularFicha = CType(Me.Table,Tbl_TabularFichaDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Id_Ficha() As Decimal
            Get
                Return CType(Me(Me.tableTbl_TabularFicha.Id_FichaColumn),Decimal)
            End Get
            Set
                Me(Me.tableTbl_TabularFicha.Id_FichaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Numero_Remision() As Decimal
            Get
                Return CType(Me(Me.tableTbl_TabularFicha.Numero_RemisionColumn),Decimal)
            End Get
            Set
                Me(Me.tableTbl_TabularFicha.Numero_RemisionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Caja_Bancaria() As String
            Get
                Return CType(Me(Me.tableTbl_TabularFicha.Caja_BancariaColumn),String)
            End Get
            Set
                Me(Me.tableTbl_TabularFicha.Caja_BancariaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ficha() As Decimal
            Get
                Return CType(Me(Me.tableTbl_TabularFicha.FichaColumn),Decimal)
            End Get
            Set
                Me(Me.tableTbl_TabularFicha.FichaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cuenta() As String
            Get
                Return CType(Me(Me.tableTbl_TabularFicha.CuentaColumn),String)
            End Get
            Set
                Me(Me.tableTbl_TabularFicha.CuentaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Moneda() As String
            Get
                Return CType(Me(Me.tableTbl_TabularFicha.MonedaColumn),String)
            End Get
            Set
                Me(Me.tableTbl_TabularFicha.MonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Efectivo() As Decimal
            Get
                Return CType(Me(Me.tableTbl_TabularFicha.EfectivoColumn),Decimal)
            End Get
            Set
                Me(Me.tableTbl_TabularFicha.EfectivoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Diferencia() As Decimal
            Get
                Return CType(Me(Me.tableTbl_TabularFicha.DiferenciaColumn),Decimal)
            End Get
            Set
                Me(Me.tableTbl_TabularFicha.DiferenciaColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Tbl_DenominacionesFichasRow
        Inherits Global.System.Data.DataRow
        
        Private tableTbl_DenominacionesFichas As Tbl_DenominacionesFichasDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTbl_DenominacionesFichas = CType(Me.Table,Tbl_DenominacionesFichasDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Id_Ficha() As Decimal
            Get
                Return CType(Me(Me.tableTbl_DenominacionesFichas.Id_FichaColumn),Decimal)
            End Get
            Set
                Me(Me.tableTbl_DenominacionesFichas.Id_FichaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Presentacion() As String
            Get
                Return CType(Me(Me.tableTbl_DenominacionesFichas.PresentacionColumn),String)
            End Get
            Set
                Me(Me.tableTbl_DenominacionesFichas.PresentacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Denominacion() As Decimal
            Get
                Return CType(Me(Me.tableTbl_DenominacionesFichas.DenominacionColumn),Decimal)
            End Get
            Set
                Me(Me.tableTbl_DenominacionesFichas.DenominacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cantidad() As Decimal
            Get
                Return CType(Me(Me.tableTbl_DenominacionesFichas.CantidadColumn),Decimal)
            End Get
            Set
                Me(Me.tableTbl_DenominacionesFichas.CantidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Importe() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTbl_DenominacionesFichas.ImporteColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Importe' de la tabla 'Tbl_DenominacionesFichas' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableTbl_DenominacionesFichas.ImporteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsImporteNull() As Boolean
            Return Me.IsNull(Me.tableTbl_DenominacionesFichas.ImporteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetImporteNull()
            Me(Me.tableTbl_DenominacionesFichas.ImporteColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class tbl_ActaDiferenciaRow
        Inherits Global.System.Data.DataRow
        
        Private tabletbl_ActaDiferencia As tbl_ActaDiferenciaDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletbl_ActaDiferencia = CType(Me.Table,tbl_ActaDiferenciaDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Folio() As String
            Get
                Try 
                    Return CType(Me(Me.tabletbl_ActaDiferencia.FolioColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Folio' de la tabla 'tbl_ActaDiferencia' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_ActaDiferencia.FolioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fecha() As String
            Get
                Try 
                    Return CType(Me(Me.tabletbl_ActaDiferencia.FechaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Fecha' de la tabla 'tbl_ActaDiferencia' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_ActaDiferencia.FechaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TipoDiferencia() As String
            Get
                Try 
                    Return CType(Me(Me.tabletbl_ActaDiferencia.TipoDiferenciaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TipoDiferencia' de la tabla 'tbl_ActaDiferencia' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_ActaDiferencia.TipoDiferenciaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Diferencia() As String
            Get
                Try 
                    Return CType(Me(Me.tabletbl_ActaDiferencia.DiferenciaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Diferencia' de la tabla 'tbl_ActaDiferencia' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_ActaDiferencia.DiferenciaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DiferenciaLetras() As String
            Get
                Try 
                    Return CType(Me(Me.tabletbl_ActaDiferencia.DiferenciaLetrasColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DiferenciaLetras' de la tabla 'tbl_ActaDiferencia' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_ActaDiferencia.DiferenciaLetrasColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cliente() As String
            Get
                Try 
                    Return CType(Me(Me.tabletbl_ActaDiferencia.ClienteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Cliente' de la tabla 'tbl_ActaDiferencia' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_ActaDiferencia.ClienteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Caja() As String
            Get
                Try 
                    Return CType(Me(Me.tabletbl_ActaDiferencia.CajaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Caja' de la tabla 'tbl_ActaDiferencia' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_ActaDiferencia.CajaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Remision() As String
            Get
                Try 
                    Return CType(Me(Me.tabletbl_ActaDiferencia.RemisionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Remision' de la tabla 'tbl_ActaDiferencia' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_ActaDiferencia.RemisionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaRemision() As String
            Get
                Try 
                    Return CType(Me(Me.tabletbl_ActaDiferencia.FechaRemisionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FechaRemision' de la tabla 'tbl_ActaDiferencia' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_ActaDiferencia.FechaRemisionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DiceContener() As String
            Get
                Try 
                    Return CType(Me(Me.tabletbl_ActaDiferencia.DiceContenerColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DiceContener' de la tabla 'tbl_ActaDiferencia' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_ActaDiferencia.DiceContenerColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DiceContenerLetras() As String
            Get
                Try 
                    Return CType(Me(Me.tabletbl_ActaDiferencia.DiceContenerLetrasColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DiceContenerLetras' de la tabla 'tbl_ActaDiferencia' es D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_ActaDiferencia.DiceContenerLetrasColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ImporteReal() As String
            Get
                Try 
                    Return CType(Me(Me.tabletbl_ActaDiferencia.ImporteRealColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ImporteReal' de la tabla 'tbl_ActaDiferencia' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_ActaDiferencia.ImporteRealColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ImporteRealLetras() As String
            Get
                Try 
                    Return CType(Me(Me.tabletbl_ActaDiferencia.ImporteRealLetrasColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ImporteRealLetras' de la tabla 'tbl_ActaDiferencia' es DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_ActaDiferencia.ImporteRealLetrasColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cajero() As String
            Get
                Try 
                    Return CType(Me(Me.tabletbl_ActaDiferencia.CajeroColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Cajero' de la tabla 'tbl_ActaDiferencia' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_ActaDiferencia.CajeroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Supervisor() As String
            Get
                Try 
                    Return CType(Me(Me.tabletbl_ActaDiferencia.SupervisorColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Supervisor' de la tabla 'tbl_ActaDiferencia' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_ActaDiferencia.SupervisorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Comentarios() As String
            Get
                Try 
                    Return CType(Me(Me.tabletbl_ActaDiferencia.ComentariosColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Comentarios' de la tabla 'tbl_ActaDiferencia' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_ActaDiferencia.ComentariosColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Comentarios_Valida() As String
            Get
                Try 
                    Return CType(Me(Me.tabletbl_ActaDiferencia.Comentarios_ValidaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Comentarios_Valida' de la tabla 'tbl_ActaDiferencia' es D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_ActaDiferencia.Comentarios_ValidaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Id_Remision() As String
            Get
                Try 
                    Return CType(Me(Me.tabletbl_ActaDiferencia.Id_RemisionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Id_Remision' de la tabla 'tbl_ActaDiferencia' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_ActaDiferencia.Id_RemisionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Hora() As String
            Get
                Try 
                    Return CType(Me(Me.tabletbl_ActaDiferencia.HoraColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Hora' de la tabla 'tbl_ActaDiferencia' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_ActaDiferencia.HoraColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Id_Servicio() As String
            Get
                Try 
                    Return CType(Me(Me.tabletbl_ActaDiferencia.Id_ServicioColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Id_Servicio' de la tabla 'tbl_ActaDiferencia' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_ActaDiferencia.Id_ServicioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cubiculo() As String
            Get
                Try 
                    Return CType(Me(Me.tabletbl_ActaDiferencia.CubiculoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Cubiculo' de la tabla 'tbl_ActaDiferencia' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_ActaDiferencia.CubiculoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFolioNull() As Boolean
            Return Me.IsNull(Me.tabletbl_ActaDiferencia.FolioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFolioNull()
            Me(Me.tabletbl_ActaDiferencia.FolioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaNull() As Boolean
            Return Me.IsNull(Me.tabletbl_ActaDiferencia.FechaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaNull()
            Me(Me.tabletbl_ActaDiferencia.FechaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTipoDiferenciaNull() As Boolean
            Return Me.IsNull(Me.tabletbl_ActaDiferencia.TipoDiferenciaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTipoDiferenciaNull()
            Me(Me.tabletbl_ActaDiferencia.TipoDiferenciaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDiferenciaNull() As Boolean
            Return Me.IsNull(Me.tabletbl_ActaDiferencia.DiferenciaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDiferenciaNull()
            Me(Me.tabletbl_ActaDiferencia.DiferenciaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDiferenciaLetrasNull() As Boolean
            Return Me.IsNull(Me.tabletbl_ActaDiferencia.DiferenciaLetrasColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDiferenciaLetrasNull()
            Me(Me.tabletbl_ActaDiferencia.DiferenciaLetrasColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsClienteNull() As Boolean
            Return Me.IsNull(Me.tabletbl_ActaDiferencia.ClienteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetClienteNull()
            Me(Me.tabletbl_ActaDiferencia.ClienteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCajaNull() As Boolean
            Return Me.IsNull(Me.tabletbl_ActaDiferencia.CajaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCajaNull()
            Me(Me.tabletbl_ActaDiferencia.CajaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRemisionNull() As Boolean
            Return Me.IsNull(Me.tabletbl_ActaDiferencia.RemisionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRemisionNull()
            Me(Me.tabletbl_ActaDiferencia.RemisionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaRemisionNull() As Boolean
            Return Me.IsNull(Me.tabletbl_ActaDiferencia.FechaRemisionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaRemisionNull()
            Me(Me.tabletbl_ActaDiferencia.FechaRemisionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDiceContenerNull() As Boolean
            Return Me.IsNull(Me.tabletbl_ActaDiferencia.DiceContenerColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDiceContenerNull()
            Me(Me.tabletbl_ActaDiferencia.DiceContenerColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDiceContenerLetrasNull() As Boolean
            Return Me.IsNull(Me.tabletbl_ActaDiferencia.DiceContenerLetrasColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDiceContenerLetrasNull()
            Me(Me.tabletbl_ActaDiferencia.DiceContenerLetrasColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsImporteRealNull() As Boolean
            Return Me.IsNull(Me.tabletbl_ActaDiferencia.ImporteRealColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetImporteRealNull()
            Me(Me.tabletbl_ActaDiferencia.ImporteRealColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsImporteRealLetrasNull() As Boolean
            Return Me.IsNull(Me.tabletbl_ActaDiferencia.ImporteRealLetrasColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetImporteRealLetrasNull()
            Me(Me.tabletbl_ActaDiferencia.ImporteRealLetrasColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCajeroNull() As Boolean
            Return Me.IsNull(Me.tabletbl_ActaDiferencia.CajeroColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCajeroNull()
            Me(Me.tabletbl_ActaDiferencia.CajeroColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSupervisorNull() As Boolean
            Return Me.IsNull(Me.tabletbl_ActaDiferencia.SupervisorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSupervisorNull()
            Me(Me.tabletbl_ActaDiferencia.SupervisorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsComentariosNull() As Boolean
            Return Me.IsNull(Me.tabletbl_ActaDiferencia.ComentariosColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetComentariosNull()
            Me(Me.tabletbl_ActaDiferencia.ComentariosColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsComentarios_ValidaNull() As Boolean
            Return Me.IsNull(Me.tabletbl_ActaDiferencia.Comentarios_ValidaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetComentarios_ValidaNull()
            Me(Me.tabletbl_ActaDiferencia.Comentarios_ValidaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsId_RemisionNull() As Boolean
            Return Me.IsNull(Me.tabletbl_ActaDiferencia.Id_RemisionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetId_RemisionNull()
            Me(Me.tabletbl_ActaDiferencia.Id_RemisionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsHoraNull() As Boolean
            Return Me.IsNull(Me.tabletbl_ActaDiferencia.HoraColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetHoraNull()
            Me(Me.tabletbl_ActaDiferencia.HoraColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsId_ServicioNull() As Boolean
            Return Me.IsNull(Me.tabletbl_ActaDiferencia.Id_ServicioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetId_ServicioNull()
            Me(Me.tabletbl_ActaDiferencia.Id_ServicioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCubiculoNull() As Boolean
            Return Me.IsNull(Me.tabletbl_ActaDiferencia.CubiculoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCubiculoNull()
            Me(Me.tabletbl_ActaDiferencia.CubiculoColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class tbl_EnvasesActaRow
        Inherits Global.System.Data.DataRow
        
        Private tabletbl_EnvasesActa As tbl_EnvasesActaDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletbl_EnvasesActa = CType(Me.Table,tbl_EnvasesActaDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Numero() As String
            Get
                Try 
                    Return CType(Me(Me.tabletbl_EnvasesActa.NumeroColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Numero' de la tabla 'tbl_EnvasesActa' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_EnvasesActa.NumeroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumeroNull() As Boolean
            Return Me.IsNull(Me.tabletbl_EnvasesActa.NumeroColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumeroNull()
            Me(Me.tabletbl_EnvasesActa.NumeroColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Tbl_DesgloseActasRow
        Inherits Global.System.Data.DataRow
        
        Private tableTbl_DesgloseActas As Tbl_DesgloseActasDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTbl_DesgloseActas = CType(Me.Table,Tbl_DesgloseActasDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Moneda() As String
            Get
                Try 
                    Return CType(Me(Me.tableTbl_DesgloseActas.MonedaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Moneda' de la tabla 'Tbl_DesgloseActas' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbl_DesgloseActas.MonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Dice_Ficha() As String
            Get
                Try 
                    Return CType(Me(Me.tableTbl_DesgloseActas.Dice_FichaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Dice_Ficha' de la tabla 'Tbl_DesgloseActas' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbl_DesgloseActas.Dice_FichaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Real_Ficha() As String
            Get
                Try 
                    Return CType(Me(Me.tableTbl_DesgloseActas.Real_FichaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Real_Ficha' de la tabla 'Tbl_DesgloseActas' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbl_DesgloseActas.Real_FichaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Dice_Doc() As String
            Get
                Try 
                    Return CType(Me(Me.tableTbl_DesgloseActas.Dice_DocColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Dice_Doc' de la tabla 'Tbl_DesgloseActas' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbl_DesgloseActas.Dice_DocColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Real_Doc() As String
            Get
                Try 
                    Return CType(Me(Me.tableTbl_DesgloseActas.Real_DocColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Real_Doc' de la tabla 'Tbl_DesgloseActas' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbl_DesgloseActas.Real_DocColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Rem_Efvo() As String
            Get
                Try 
                    Return CType(Me(Me.tableTbl_DesgloseActas.Rem_EfvoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Rem_Efvo' de la tabla 'Tbl_DesgloseActas' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbl_DesgloseActas.Rem_EfvoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Rem_Doc() As String
            Get
                Try 
                    Return CType(Me(Me.tableTbl_DesgloseActas.Rem_DocColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Rem_Doc' de la tabla 'Tbl_DesgloseActas' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbl_DesgloseActas.Rem_DocColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMonedaNull() As Boolean
            Return Me.IsNull(Me.tableTbl_DesgloseActas.MonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMonedaNull()
            Me(Me.tableTbl_DesgloseActas.MonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDice_FichaNull() As Boolean
            Return Me.IsNull(Me.tableTbl_DesgloseActas.Dice_FichaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDice_FichaNull()
            Me(Me.tableTbl_DesgloseActas.Dice_FichaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReal_FichaNull() As Boolean
            Return Me.IsNull(Me.tableTbl_DesgloseActas.Real_FichaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReal_FichaNull()
            Me(Me.tableTbl_DesgloseActas.Real_FichaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDice_DocNull() As Boolean
            Return Me.IsNull(Me.tableTbl_DesgloseActas.Dice_DocColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDice_DocNull()
            Me(Me.tableTbl_DesgloseActas.Dice_DocColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReal_DocNull() As Boolean
            Return Me.IsNull(Me.tableTbl_DesgloseActas.Real_DocColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReal_DocNull()
            Me(Me.tableTbl_DesgloseActas.Real_DocColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRem_EfvoNull() As Boolean
            Return Me.IsNull(Me.tableTbl_DesgloseActas.Rem_EfvoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRem_EfvoNull()
            Me(Me.tableTbl_DesgloseActas.Rem_EfvoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRem_DocNull() As Boolean
            Return Me.IsNull(Me.tableTbl_DesgloseActas.Rem_DocColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRem_DocNull()
            Me(Me.tableTbl_DesgloseActas.Rem_DocColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Tbl_FichasFalsosRow
        Inherits Global.System.Data.DataRow
        
        Private tableTbl_FichasFalsos As Tbl_FichasFalsosDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTbl_FichasFalsos = CType(Me.Table,Tbl_FichasFalsosDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Id_Ficha() As String
            Get
                Try 
                    Return CType(Me(Me.tableTbl_FichasFalsos.Id_FichaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Id_Ficha' de la tabla 'Tbl_FichasFalsos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbl_FichasFalsos.Id_FichaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DenominacionBanco() As String
            Get
                Try 
                    Return CType(Me(Me.tableTbl_FichasFalsos.DenominacionBancoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DenominacionBanco' de la tabla 'Tbl_FichasFalsos' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbl_FichasFalsos.DenominacionBancoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CantidadFalsos() As String
            Get
                Try 
                    Return CType(Me(Me.tableTbl_FichasFalsos.CantidadFalsosColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CantidadFalsos' de la tabla 'Tbl_FichasFalsos' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableTbl_FichasFalsos.CantidadFalsosColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ImporteFalso() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTbl_FichasFalsos.ImporteFalsoColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ImporteFalso' de la tabla 'Tbl_FichasFalsos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbl_FichasFalsos.ImporteFalsoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsId_FichaNull() As Boolean
            Return Me.IsNull(Me.tableTbl_FichasFalsos.Id_FichaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetId_FichaNull()
            Me(Me.tableTbl_FichasFalsos.Id_FichaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDenominacionBancoNull() As Boolean
            Return Me.IsNull(Me.tableTbl_FichasFalsos.DenominacionBancoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDenominacionBancoNull()
            Me(Me.tableTbl_FichasFalsos.DenominacionBancoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCantidadFalsosNull() As Boolean
            Return Me.IsNull(Me.tableTbl_FichasFalsos.CantidadFalsosColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCantidadFalsosNull()
            Me(Me.tableTbl_FichasFalsos.CantidadFalsosColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsImporteFalsoNull() As Boolean
            Return Me.IsNull(Me.tableTbl_FichasFalsos.ImporteFalsoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetImporteFalsoNull()
            Me(Me.tableTbl_FichasFalsos.ImporteFalsoColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Tbl_DatosEmpresaRow
        Inherits Global.System.Data.DataRow
        
        Private tableTbl_DatosEmpresa As Tbl_DatosEmpresaDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTbl_DatosEmpresa = CType(Me.Table,Tbl_DatosEmpresaDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nombre() As String
            Get
                Try 
                    Return CType(Me(Me.tableTbl_DatosEmpresa.NombreColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Nombre' de la tabla 'Tbl_DatosEmpresa' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbl_DatosEmpresa.NombreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Direccion() As String
            Get
                Try 
                    Return CType(Me(Me.tableTbl_DatosEmpresa.DireccionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Direccion' de la tabla 'Tbl_DatosEmpresa' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbl_DatosEmpresa.DireccionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ciudad() As String
            Get
                Try 
                    Return CType(Me(Me.tableTbl_DatosEmpresa.CiudadColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Ciudad' de la tabla 'Tbl_DatosEmpresa' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbl_DatosEmpresa.CiudadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Estado() As String
            Get
                Try 
                    Return CType(Me(Me.tableTbl_DatosEmpresa.EstadoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Estado' de la tabla 'Tbl_DatosEmpresa' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbl_DatosEmpresa.EstadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Empresa() As String
            Get
                Try 
                    Return CType(Me(Me.tableTbl_DatosEmpresa.EmpresaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Empresa' de la tabla 'Tbl_DatosEmpresa' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbl_DatosEmpresa.EmpresaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Logo() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableTbl_DatosEmpresa.LogoColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Logo' de la tabla 'Tbl_DatosEmpresa' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbl_DatosEmpresa.LogoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RFC() As String
            Get
                Try 
                    Return CType(Me(Me.tableTbl_DatosEmpresa.RFCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'RFC' de la tabla 'Tbl_DatosEmpresa' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbl_DatosEmpresa.RFCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RegPatronal() As String
            Get
                Try 
                    Return CType(Me(Me.tableTbl_DatosEmpresa.RegPatronalColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'RegPatronal' de la tabla 'Tbl_DatosEmpresa' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbl_DatosEmpresa.RegPatronalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Giro() As String
            Get
                Try 
                    Return CType(Me(Me.tableTbl_DatosEmpresa.GiroColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Giro' de la tabla 'Tbl_DatosEmpresa' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbl_DatosEmpresa.GiroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreNull() As Boolean
            Return Me.IsNull(Me.tableTbl_DatosEmpresa.NombreColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreNull()
            Me(Me.tableTbl_DatosEmpresa.NombreColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDireccionNull() As Boolean
            Return Me.IsNull(Me.tableTbl_DatosEmpresa.DireccionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDireccionNull()
            Me(Me.tableTbl_DatosEmpresa.DireccionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCiudadNull() As Boolean
            Return Me.IsNull(Me.tableTbl_DatosEmpresa.CiudadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCiudadNull()
            Me(Me.tableTbl_DatosEmpresa.CiudadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEstadoNull() As Boolean
            Return Me.IsNull(Me.tableTbl_DatosEmpresa.EstadoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEstadoNull()
            Me(Me.tableTbl_DatosEmpresa.EstadoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEmpresaNull() As Boolean
            Return Me.IsNull(Me.tableTbl_DatosEmpresa.EmpresaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEmpresaNull()
            Me(Me.tableTbl_DatosEmpresa.EmpresaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLogoNull() As Boolean
            Return Me.IsNull(Me.tableTbl_DatosEmpresa.LogoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLogoNull()
            Me(Me.tableTbl_DatosEmpresa.LogoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRFCNull() As Boolean
            Return Me.IsNull(Me.tableTbl_DatosEmpresa.RFCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRFCNull()
            Me(Me.tableTbl_DatosEmpresa.RFCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRegPatronalNull() As Boolean
            Return Me.IsNull(Me.tableTbl_DatosEmpresa.RegPatronalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRegPatronalNull()
            Me(Me.tableTbl_DatosEmpresa.RegPatronalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGiroNull() As Boolean
            Return Me.IsNull(Me.tableTbl_DatosEmpresa.GiroColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGiroNull()
            Me(Me.tableTbl_DatosEmpresa.GiroColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Tbl_RecuentoDesgloseRow
        Inherits Global.System.Data.DataRow
        
        Private tableTbl_RecuentoDesglose As Tbl_RecuentoDesgloseDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTbl_RecuentoDesglose = CType(Me.Table,Tbl_RecuentoDesgloseDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Moneda() As String
            Get
                Try 
                    Return CType(Me(Me.tableTbl_RecuentoDesglose.MonedaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Moneda' de la tabla 'Tbl_RecuentoDesglose' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbl_RecuentoDesglose.MonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Denominacion() As String
            Get
                Try 
                    Return CType(Me(Me.tableTbl_RecuentoDesglose.DenominacionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Denominacion' de la tabla 'Tbl_RecuentoDesglose' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbl_RecuentoDesglose.DenominacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cantidad() As String
            Get
                Try 
                    Return CType(Me(Me.tableTbl_RecuentoDesglose.CantidadColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Cantidad' de la tabla 'Tbl_RecuentoDesglose' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbl_RecuentoDesglose.CantidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Importe() As String
            Get
                Try 
                    Return CType(Me(Me.tableTbl_RecuentoDesglose.ImporteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Importe' de la tabla 'Tbl_RecuentoDesglose' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbl_RecuentoDesglose.ImporteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nombre_Comercial() As String
            Get
                Try 
                    Return CType(Me(Me.tableTbl_RecuentoDesglose.Nombre_ComercialColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Nombre_Comercial' de la tabla 'Tbl_RecuentoDesglose' es D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbl_RecuentoDesglose.Nombre_ComercialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Efectivo() As String
            Get
                Try 
                    Return CType(Me(Me.tableTbl_RecuentoDesglose.EfectivoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Efectivo' de la tabla 'Tbl_RecuentoDesglose' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbl_RecuentoDesglose.EfectivoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Despensa() As String
            Get
                Try 
                    Return CType(Me(Me.tableTbl_RecuentoDesglose.DespensaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Despensa' de la tabla 'Tbl_RecuentoDesglose' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbl_RecuentoDesglose.DespensaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Loteria() As String
            Get
                Try 
                    Return CType(Me(Me.tableTbl_RecuentoDesglose.LoteriaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Loteria' de la tabla 'Tbl_RecuentoDesglose' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbl_RecuentoDesglose.LoteriaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Morralla() As String
            Get
                Try 
                    Return CType(Me(Me.tableTbl_RecuentoDesglose.MorrallaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Morralla' de la tabla 'Tbl_RecuentoDesglose' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbl_RecuentoDesglose.MorrallaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Otros() As String
            Get
                Try 
                    Return CType(Me(Me.tableTbl_RecuentoDesglose.OtrosColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Otros' de la tabla 'Tbl_RecuentoDesglose' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbl_RecuentoDesglose.OtrosColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMonedaNull() As Boolean
            Return Me.IsNull(Me.tableTbl_RecuentoDesglose.MonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMonedaNull()
            Me(Me.tableTbl_RecuentoDesglose.MonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDenominacionNull() As Boolean
            Return Me.IsNull(Me.tableTbl_RecuentoDesglose.DenominacionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDenominacionNull()
            Me(Me.tableTbl_RecuentoDesglose.DenominacionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCantidadNull() As Boolean
            Return Me.IsNull(Me.tableTbl_RecuentoDesglose.CantidadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCantidadNull()
            Me(Me.tableTbl_RecuentoDesglose.CantidadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsImporteNull() As Boolean
            Return Me.IsNull(Me.tableTbl_RecuentoDesglose.ImporteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetImporteNull()
            Me(Me.tableTbl_RecuentoDesglose.ImporteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombre_ComercialNull() As Boolean
            Return Me.IsNull(Me.tableTbl_RecuentoDesglose.Nombre_ComercialColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombre_ComercialNull()
            Me(Me.tableTbl_RecuentoDesglose.Nombre_ComercialColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEfectivoNull() As Boolean
            Return Me.IsNull(Me.tableTbl_RecuentoDesglose.EfectivoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEfectivoNull()
            Me(Me.tableTbl_RecuentoDesglose.EfectivoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDespensaNull() As Boolean
            Return Me.IsNull(Me.tableTbl_RecuentoDesglose.DespensaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDespensaNull()
            Me(Me.tableTbl_RecuentoDesglose.DespensaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLoteriaNull() As Boolean
            Return Me.IsNull(Me.tableTbl_RecuentoDesglose.LoteriaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLoteriaNull()
            Me(Me.tableTbl_RecuentoDesglose.LoteriaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMorrallaNull() As Boolean
            Return Me.IsNull(Me.tableTbl_RecuentoDesglose.MorrallaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMorrallaNull()
            Me(Me.tableTbl_RecuentoDesglose.MorrallaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOtrosNull() As Boolean
            Return Me.IsNull(Me.tableTbl_RecuentoDesglose.OtrosColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOtrosNull()
            Me(Me.tableTbl_RecuentoDesglose.OtrosColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Tbl_HojaTrabajoRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Tbl_HojaTrabajoRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Tbl_HojaTrabajoRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Tbl_HojaTrabajoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Tbl_DenominacionRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Tbl_DenominacionRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Tbl_DenominacionRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Tbl_DenominacionRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Cat_SucursalesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Cat_SucursalesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Cat_SucursalesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Cat_SucursalesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Tbl_FichasRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Tbl_FichasRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Tbl_FichasRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Tbl_FichasRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Tbl_ChequesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Tbl_ChequesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Tbl_ChequesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Tbl_ChequesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Tbl_FichasEfectivoRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Tbl_FichasEfectivoRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Tbl_FichasEfectivoRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Tbl_FichasEfectivoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Tbl_TabularRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Tbl_TabularRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Tbl_TabularRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Tbl_TabularRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Tbl_TabularFichaRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Tbl_TabularFichaRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Tbl_TabularFichaRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Tbl_TabularFichaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Tbl_DenominacionesFichasRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Tbl_DenominacionesFichasRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Tbl_DenominacionesFichasRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Tbl_DenominacionesFichasRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class tbl_ActaDiferenciaRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tbl_ActaDiferenciaRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As tbl_ActaDiferenciaRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As tbl_ActaDiferenciaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class tbl_EnvasesActaRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tbl_EnvasesActaRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As tbl_EnvasesActaRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As tbl_EnvasesActaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Tbl_DesgloseActasRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Tbl_DesgloseActasRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Tbl_DesgloseActasRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Tbl_DesgloseActasRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Tbl_FichasFalsosRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Tbl_FichasFalsosRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Tbl_FichasFalsosRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Tbl_FichasFalsosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Tbl_DatosEmpresaRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Tbl_DatosEmpresaRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Tbl_DatosEmpresaRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Tbl_DatosEmpresaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Tbl_RecuentoDesgloseRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Tbl_RecuentoDesgloseRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Tbl_RecuentoDesgloseRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Tbl_RecuentoDesgloseRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
